{
  "createdAt": "2025-06-11T08:47:40.946Z",
  "updatedAt": "2025-06-11T08:47:44.994Z",
  "id": "3hNdtyKEJ88cHZmC",
  "name": "AppTest-Collect_job_requests__fill_in_CRM",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/leadgeneration/tests/CollectJobRequestsAndFillInCRM",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -480,
        -60
      ],
      "id": "113541e3-26da-4d0f-a9e1-f22b125bde6b",
      "name": "Webhook",
      "webhookId": "d99de15f-3889-479d-9929-06c39a3ff2e9"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>Collect Job Requests & Fill in CRM Exam</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8,30,47,0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46,125,50,0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8,30,47,0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25,118,210,0.04);\n    }\n    input[type=\"radio\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n    }\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    input[disabled] {\n      background: #f3f3f3;\n      color: #888;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46,125,50,0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8,30,47,0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>Collect Job Requests & Fill in CRM Exam</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button id=\"startButton\" onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>Collect Job Requests & Fill in CRM Exam</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"Lead Generator\" disabled>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Q1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. What is the primary objective of collecting job requests and logging them in CRM?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"recordKeeping\" data-correct=\"true\">\n          To maintain accurate client records and streamline the hiring process\n        </label>\n        <label><input type=\"radio\" name=\"q1\" value=\"socialMediaBoost\">\n          To boost social media presence\n        </label>\n        <label><input type=\"radio\" name=\"q1\" value=\"reduceCalls\">\n          To eliminate follow-up calls entirely\n        </label>\n        <label><input type=\"radio\" name=\"q1\" value=\"increaseAds\">\n          To increase advertising budgets\n        </label>\n      </div>\n\n      <!-- Q2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. When initiating contact with a lead for a job request, what is a best practice?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"genericEmail\">\n          Use a generic message for all leads\n        </label>\n        <label><input type=\"radio\" name=\"q2\" value=\"personalized\" data-correct=\"true\">\n          Use a concise, personalized, and professional message\n        </label>\n        <label><input type=\"radio\" name=\"q2\" value=\"longPitch\">\n          Write a long, detailed pitch\n        </label>\n        <label><input type=\"radio\" name=\"q2\" value=\"salesy\">\n          Focus solely on selling your service\n        </label>\n      </div>\n\n      <!-- Q3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. Which question is NOT recommended when gathering job request details?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"tasks\" data-correct=\"true\">\n          \"What is your favorite color?\"\n        </label>\n        <label><input type=\"radio\" name=\"q3\" value=\"tasksDetail\">\n          \"What are the primary tasks for this role?\"\n        </label>\n        <label><input type=\"radio\" name=\"q3\" value=\"qualifications\">\n          \"What qualifications or skills are required?\"\n        </label>\n        <label><input type=\"radio\" name=\"q3\" value=\"deadlines\">\n          \"What are your hiring priorities and deadlines?\"\n        </label>\n      </div>\n\n      <!-- Q4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. In the CRM's \"Needed Candidate\" tab, which field captures the date the job request was received?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"department\">\n          Department\n        </label>\n        <label><input type=\"radio\" name=\"q4\" value=\"profession\">\n          Profession\n        </label>\n        <label><input type=\"radio\" name=\"q4\" value=\"demandedDate\" data-correct=\"true\">\n          Demanded Date\n        </label>\n        <label><input type=\"radio\" name=\"q4\" value=\"clientTools\">\n          Client Needed Tools\n        </label>\n      </div>\n\n      <!-- Q5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. Which field in the CRM should include specific client requirements or comments?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"department\">\n          Department\n        </label>\n        <label><input type=\"radio\" name=\"q5\" value=\"profession\">\n          Profession\n        </label>\n        <label><input type=\"radio\" name=\"q5\" value=\"note\" data-correct=\"true\">\n          Note\n        </label>\n        <label><input type=\"radio\" name=\"q5\" value=\"demandedDate\">\n          Demanded Date\n        </label>\n      </div>\n\n      <!-- Q6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. Which CRM field is used to specify the job title for a request?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"department\">\n          Department\n        </label>\n        <label><input type=\"radio\" name=\"q6\" value=\"profession\" data-correct=\"true\">\n          Profession\n        </label>\n        <label><input type=\"radio\" name=\"q6\" value=\"clientTools\">\n          Client Needed Tools\n        </label>\n        <label><input type=\"radio\" name=\"q6\" value=\"note\">\n          Note\n        </label>\n      </div>\n\n      <!-- Q7 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. What is the purpose of updating the Client Needed Status in the CRM?</h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"trackProcess\" data-correct=\"true\">\n          To track changes in the hiring process\n        </label>\n        <label><input type=\"radio\" name=\"q7\" value=\"increaseBudget\">\n          To increase the client’s budget\n        </label>\n        <label><input type=\"radio\" name=\"q7\" value=\"manageContacts\">\n          To update personal contact information\n        </label>\n        <label><input type=\"radio\" name=\"q7\" value=\"ignoreStatus\">\n          To ignore job request details\n        </label>\n      </div>\n\n      <!-- Q8 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. What advanced technique can help automate job request collection?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"useForms\" data-correct=\"true\">\n          Integrate Web Forms or CRM forms to capture job requests\n        </label>\n        <label><input type=\"radio\" name=\"q8\" value=\"manualCalls\">\n          Rely solely on manual phone calls\n        </label>\n        <label><input type=\"radio\" name=\"q8\" value=\"paperForms\">\n          Use paper forms and fax them in\n        </label>\n        <label><input type=\"radio\" name=\"q8\" value=\"socialMediaOnly\">\n          Collect data only through social media comments\n        </label>\n      </div>\n\n      <!-- Q9 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. What is one method for enriching job request data in the CRM?</h3>\n        <label><input type=\"radio\" name=\"q9\" value=\"autoLog\" data-correct=\"true\">\n          Auto-log notes, social profiles, and activity history\n        </label>\n        <label><input type=\"radio\" name=\"q9\" value=\"ignoreData\">\n          Ignore candidate records entirely\n        </label>\n        <label><input type=\"radio\" name=\"q9\" value=\"manualOnly\">\n          Only use manual data entry without any enrichment\n        </label>\n        <label><input type=\"radio\" name=\"q9\" value=\"deleteOld\">\n          Regularly delete old job requests\n        </label>\n      </div>\n\n      <!-- Q10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. What is the final benefit of properly collecting job requests and filling in CRM?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"streamlineHiring\" data-correct=\"true\">\n          It streamlines the hiring process and improves candidate placement\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"reduceLeads\">\n          It reduces the number of leads\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"increaseConfusion\">\n          It increases internal confusion\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"raiseBudget\">\n          It raises the hiring budget unnecessarily\n        </label>\n      </div>\n\n      <!-- Q11 (Multi Answer) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. Select all steps involved in initiating job requests from leads.</h3>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"identifyClients\" data-correct=\"true\">\n          Identify potential clients via LinkedIn, email, or direct outreach\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"establishComm\" data-correct=\"true\">\n          Establish initial communication to understand hiring needs\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"scheduleCalls\" data-correct=\"true\">\n          Aim to schedule calls or meetings to gain in-depth insights\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"ignoreFollowUp\">\n          Ignore follow-up opportunities\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"sendMassEmail\">\n          Send a generic mass email without customization\n        </label>\n      </div>\n\n      <!-- Q12 (Multi Answer) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Select all CRM fields that should be completed in the \"Needed Candidate\" tab.</h3>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"department\" data-correct=\"true\">\n          Department\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"profession\" data-correct=\"true\">\n          Profession\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"clientTools\" data-correct=\"true\">\n          Client Needed Tools\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"demandedDate\" data-correct=\"true\">\n          Demanded Date\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"note\" data-correct=\"true\">\n          Note\n        </label>\n      </div>\n\n      <!-- Q13 (Multi Answer) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. Select all valid Client Needed Status options mentioned in the guide.</h3>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"Required\" data-correct=\"true\">\n          Required\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"Hunting\" data-correct=\"true\">\n          Hunting\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"Demand\" data-correct=\"true\">\n          Demand\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"Hired\" data-correct=\"true\">\n          Hired\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"Rejected\">\n          Rejected\n        </label>\n      </div>\n\n      <!-- Q14 (Multi Answer) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Select all advanced techniques for job request management.</h3>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"useWebForms\" data-correct=\"true\">\n          Use Web Forms or CRM forms to capture job requests\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"crmAutomations\" data-correct=\"true\">\n          Set up CRM automations for automatic status changes\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"booleanSearch\" data-correct=\"true\">\n          Leverage Boolean search in the CRM\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"paperTracking\">\n          Rely solely on manual paper tracking\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"massCalls\">\n          Use mass phone calls to verify job requests\n        </label>\n      </div>\n\n      <!-- Q15 (Multi Answer) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Select all benefits of effectively collecting job requests and logging them in CRM.</h3>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"accurateRecords\" data-correct=\"true\">\n          Maintaining accurate client records\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"streamlinedHiring\" data-correct=\"true\">\n          Streamlining the hiring process\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"successfulPlacements\" data-correct=\"true\">\n          Ensuring successful candidate placements\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"schedulingConflicts\">\n          Creating scheduling conflicts\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"leadConversion\" data-correct=\"true\">\n          Enhancing lead conversion rates\n        </label>\n      </div>\n\n      <button type=\"button\" id=\"submitButton\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    // Fisher–Yates shuffle for arrays\n    function shuffle(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n    \n    // Randomize answer labels for each question (excluding user data block)\n    function randomizeAnswers() {\n      const questions = document.querySelectorAll('.question[data-points]:not([data-points=\"0\"])');\n      questions.forEach(question => {\n        const labels = Array.from(question.querySelectorAll('label'));\n        const shuffled = shuffle(labels);\n        shuffled.forEach(label => label.parentNode.removeChild(label));\n        const heading = question.querySelector('h3');\n        shuffled.forEach(label => heading.parentNode.appendChild(label));\n      });\n    }\n    \n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 minutes (300 seconds)\n    const examName = \"Collect Job Requests & Fill in CRM Exam\";\n    \n    // Format date as \"dd.mm.yyyy hh:mm\"\n    function formatDate(date) {\n      const options = { day: \"2-digit\", month: \"2-digit\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\", hour12: false };\n      const formatted = date.toLocaleString(\"en-GB\", options);\n      return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n    }\n    \n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      randomizeAnswers();\n      startTimer();\n    }\n    \n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const rem = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(rem).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n    \n    function calculateScore(timeout = false) {\n      clearInterval(timer);\n      const submitBtn = document.getElementById('submitButton');\n      if (submitBtn) { submitBtn.style.display = 'none'; }\n      \n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        if (points === 0) return; // Skip user data block\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(inp => {\n          if (inp.checked) selectedValues.push(inp.value);\n          if (inp.dataset.correct === \"true\") { correctValues.push(inp.value); }\n        });\n        if (selectedValues.length !== correctValues.length ||\n            !selectedValues.every(val => correctValues.includes(val))) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(inp => {\n            if (inp.dataset.correct === \"true\") {\n              inp.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      \n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsed = `${Math.floor(seconds / 60)}m ${seconds % 60}s`;\n      let resultsHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsed}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      resultsHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='https://hook.eu1.make.com/jcjl176nvrhlm4ag7qiixjzssxqdbl5n'\">Read Again</button>\n        <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n      `;\n      document.getElementById('result').innerHTML = resultsHTML;\n      \n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n      const postData = {\n        fullName,\n        profession,\n        recruiter,\n        day: \"5\",\n        examName,\n        scoreObtained: totalPoints,\n        scoreTotal: maxPoints,\n        timeUsed: seconds,\n        timeTotal: timeLimit,\n        date: formatDate(new Date())\n      };\n      \n      fetch(\"https://hook.eu1.make.com/2yp4rtezjxi2o6fi2jouedn3i7sgxss1\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(postData)\n      })\n      .then(res => res.text())\n      .then(data => console.log(\"POST response:\", data))\n      .catch(err => console.error(\"Error in POST:\", err));\n      \n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n    \n    // loadTask() replaces the exam view with task instructions, an optional link input, and a \"Mark as done\" button.\n    function loadTask() {\n      const taskMarkdown = `# Follow-Up Sequences Task\n\nThis task will assess your ability to structure effective follow-up sequences, create customized follow-up messages for both LinkedIn and email, and accurately log these follow-ups in the CRM. You will complete practical exercises that demonstrate your ability to nurture leads efficiently.\n\n---\n\n# 🔹 Task 1: Build a Follow-Up Sequence for a Potential Client\n\n## Scenario:\nYou reached out to Lisa Carter, Director of Marketing at ShopEase (an e-commerce company) but haven’t received a response.\n\n## Steps to Complete:\n1. **Design a Structured Follow-Up Sequence:**\n   - **First Follow-Up (Email):** 3 days after initial outreach.\n   - **Second Follow-Up (LinkedIn):** 2 days after the first follow-up.\n   - **Third Follow-Up (Email):** 5 days after the second follow-up (adding extra value, e.g., a case study).\n   - **Final Follow-Up (LinkedIn):** 10 days after the third follow-up.\n2. **Generate and Refine Messages:**\n   - Use an AI tool to generate an initial follow-up message for each touchpoint.\n   - Manually refine each message to enhance personalization and clarity.\n   \n## Expected Output:\n- A document detailing your complete follow-up sequence for both email and LinkedIn touchpoints.\n- Include both the AI-generated and manually refined versions of each message.\n\n---\n\n# 🔹 Task 2: Log Follow-Ups in CRM\n\n## Steps to Complete:\n1. **Open a Lead Profile:**\n   - Select a lead profile from the CRM.\n2. **Update the Lead’s Status:**\n   - Change the status based on the latest interaction (e.g., Interested, Follow-Up Later, Not Interested).\n3. **Fill in the Communication & Follow-Up Section:**\n   - **Date of Communication**\n   - **Communication Type:** Follow-Up\n   - **Notes:** Summarize the conversation and outline next steps.\n   - **Next Follow-Up Date:** Set a reminder for future engagement.\n4. **Capture a Screenshot:**\n   - Take a screenshot of the updated CRM entry showing the follow-up details.\n\n## Expected Output:\n- A screenshot of the updated CRM entry with follow-up details and your notes.\n\n---\n\n# 📌 Submission Instructions\n- **Document Format:** Google Docs or Word.\n- **Structure the Document as Follows:**\n  1. **Task 1:** Follow-Up Sequence (Include your complete sequence with both AI-generated and manually refined messages)\n  2. **Task 2:** CRM Follow-Up Logging (Include a screenshot of the updated CRM entry along with your notes)\n\n---\n\n# 💡 Bonus Challenge\n- **Additional Touchpoint:** Propose one extra touchpoint that could further increase response rates.\n- **Message Analysis:** Compare the AI-generated and manually refined messages, and explain which version is more effective and why.\n\nBy completing this task, you will demonstrate your ability to create structured follow-up sequences, log CRM interactions accurately, and schedule timely reminders for effective lead engagement.`;\n      \n      const parsedMarkdown = parseMarkdown(taskMarkdown);\n      document.body.innerHTML = `\n        <div style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding: 2rem;\">\n          ${parsedMarkdown}\n          <div style=\"margin-top: 2rem;\">\n            <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Paste your task result link here:</label>\n            <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://docs.google.com/...\" style=\"width: 100%; padding: 8px; margin-top: 4px;\">\n            <button type=\"button\" id=\"submitTaskLinkButton\" style=\"margin-top: 8px; background: var(--green); color: #fff; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer;\">Submit Task Link</button>\n          </div>\n          <div style=\"margin-top: 1rem;\">\n            <input type=\"checkbox\" id=\"taskCompletedCheckbox\">\n            <label for=\"taskCompletedCheckbox\" style=\"font-weight: bold; color: #2E7D32;\">\n              I have completed the task. Click here to mark as complete.\n            </label>\n          </div>\n        </div>\n      `;\n      \n      // Submit Task Link button event\n      const submitTaskLinkButton = document.getElementById(\"submitTaskLinkButton\");\n      submitTaskLinkButton.addEventListener(\"click\", function() {\n        const taskLink = document.getElementById(\"taskLinkInput\").value.trim();\n        if (!taskLink) {\n          alert(\"Please paste your task result link before submitting.\");\n          return;\n        }\n        // Отправляем POST-запрос с ссылкой на вебхук (обновите URL, если необходимо)\n        fetch(\"https://hook.eu1.make.com/your-task-link-endpoint\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ taskLink: taskLink })\n        })\n        .then(response => response.text())\n        .then(data => {\n          alert(\"Task link submitted successfully!\");\n          console.log(\"Task link POST response:\", data);\n        })\n        .catch(err => console.error(\"Error submitting task link:\", err));\n      });\n      \n      // Task Completed checkbox event\n      const checkbox = document.getElementById(\"taskCompletedCheckbox\");\n      checkbox.addEventListener(\"change\", function() {\n        if (checkbox.checked) {\n          fetch(\"https://hook.eu1.make.com/dy57247xgkw7criy6ind4j78ej3yqrx7\", { method: \"GET\" })\n          .then(response => response.text())\n          .then(data => {\n            console.log(\"Task completed webhook sent:\", data);\n            checkbox.disabled = true;\n          })\n          .catch(err => console.error(\"Error sending task completed webhook:\", err));\n        }\n      });\n    }\n    \n    // Markdown parser: converts markdown headings into collapsible <details> elements (collapsed by default)\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line + \"<br>\";\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -260,
        -60
      ],
      "id": "f8e8b5c0-a69a-4e3b-99e6-100be5613276",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "a5dec453-0c18-4d52-94e5-a98f179f1a57",
  "triggerCount": 0,
  "tags": []
}