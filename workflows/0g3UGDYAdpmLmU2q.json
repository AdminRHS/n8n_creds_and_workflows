{
  "createdAt": "2025-06-11T08:51:58.249Z",
  "updatedAt": "2025-06-11T08:52:02.600Z",
  "id": "0g3UGDYAdpmLmU2q",
  "name": "AppTest-Google_calendar_set_up_and_events_planning",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/leadgeneration/tests/GoogleCalendarSetUpAndEventsPlanning",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -440,
        -120
      ],
      "id": "97787a0a-7422-4f98-a629-91ce4e35639f",
      "name": "Webhook",
      "webhookId": "b2130333-aae3-4cd0-894c-de74aa9b8807"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Google Calendar Setup and Events Planning Exam</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    input[type=\"radio\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n    }\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    input[disabled] {\n      background: #f3f3f3;\n      color: #888;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      letter-spacing: 0.5px;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    /* \"Mark as done\" button styling */\n    #markDoneBtn {\n      margin-top: 8px;\n      background: var(--green);\n      padding: 10px 20px;\n      color: #fff;\n      font-size: 15px;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      display: inline-flex;\n      align-items: center;\n      transition: background 0.3s ease, transform 0.2s ease;\n    }\n    #markDoneBtn:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #markDoneBtnIcon {\n      width: 18px;\n      height: 18px;\n      margin-right: 8px;\n      transition: fill 0.3s ease;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>Google Calendar Setup and Events Planning Exam</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button id=\"startButton\" onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>Google Calendar Setup and Events Planning Exam</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"Lead Generator\" disabled>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Q1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. Which URL is used to access Google Calendar?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"calendar.google.com\" data-correct=\"true\"> calendar.google.com</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"googlecalendar.com\"> googlecalendar.com</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"calendar.yahoo.com\"> calendar.yahoo.com</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"mail.google.com\"> mail.google.com</label>\n      </div>\n\n      <!-- Q2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. Which account is recommended for signing in to Google Calendar for Remote Helpers?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"lg@rh-s.com\" data-correct=\"true\"> lg@rh-s.com</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"personal@gmail.com\"> personal@gmail.com</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"sales@rh-s.com\"> sales@rh-s.com</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"support@rh-s.com\"> support@rh-s.com</label>\n      </div>\n\n      <!-- Q3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. What is the main purpose of creating separate calendars (Work, Personal, Team Events)?</h3>\n        <label>\n          <input type=\"radio\" name=\"q3\" value=\"separation\" data-correct=\"true\">\n          To keep personal and work events separate and avoid scheduling conflicts\n        </label>\n        <label><input type=\"radio\" name=\"q3\" value=\"moreColors\"> To have more color options for fun</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"sharePublicly\"> To share events publicly on social media</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"combineEvents\"> To merge all events into one calendar</label>\n      </div>\n\n      <!-- Q4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. How should the event title be formatted according to the guide?</h3>\n        <label>\n          <input type=\"radio\" name=\"q4\" value=\"RemoteHelpersMeeting\">\n          \"Remote Helpers Meeting\"\n        </label>\n        <label>\n          <input type=\"radio\" name=\"q4\" value=\"CompanyNameRemote\" data-correct=\"true\">\n          \"Company Name - Remote Helpers\"\n        </label>\n        <label><input type=\"radio\" name=\"q4\" value=\"LeadCall\"> \"Lead Call\"</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"MeetingRequest\"> \"Meeting Request\"</label>\n      </div>\n\n      <!-- Q5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. What is the recommended duration for a client meeting event?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"15min\"> 15 minutes</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"30min\" data-correct=\"true\"> 30 minutes</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"45min\"> 45 minutes</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"60min\"> 60 minutes</label>\n      </div>\n\n      <!-- Q6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. How many minutes before the event is it recommended to set a notification reminder?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"10min\"> 10 minutes</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"20min\" data-correct=\"true\"> 20 minutes</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"30min\"> 30 minutes</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"5min\"> 5 minutes</label>\n      </div>\n\n      <!-- Q7 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. What is the primary benefit of using color coding in Google Calendar?</h3>\n        <label>\n          <input type=\"radio\" name=\"q7\" value=\"organize\" data-correct=\"true\">\n          It allows you to quickly identify different types of events\n        </label>\n        <label><input type=\"radio\" name=\"q7\" value=\"beauty\"> It makes the calendar look more colorful</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"randomSort\"> It sorts events randomly</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"priorityOnly\"> It only shows the most important events</label>\n      </div>\n\n      <!-- Q8 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. Which color is recommended for external client calls?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"blue\" data-correct=\"true\"> Blue</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"green\"> Green</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"yellow\"> Yellow</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"red\"> Red</label>\n      </div>\n\n      <!-- Q9 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. After creating an event in Google Calendar, what is the next recommended action?</h3>\n        <label>\n          <input type=\"radio\" name=\"q9\" value=\"confirmSave\" data-correct=\"true\">\n          Confirm availability, then click \"Save\" and \"Send\" to notify attendees\n        </label>\n        <label><input type=\"radio\" name=\"q9\" value=\"printEvent\"> Print the event details</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"shareSocial\"> Share the event on social media</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"deleteEvent\"> Immediately delete the event for privacy</label>\n      </div>\n\n      <!-- Q10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. What is the purpose of syncing Google Calendar events with the CRM?</h3>\n        <label>\n          <input type=\"radio\" name=\"q10\" value=\"updateStatus\" data-correct=\"true\">\n          To update the lead status to “Event” and log communication details\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"deleteRecord\"> To delete the lead record automatically</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"autoEmail\"> To automatically send marketing emails to the lead</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"exportData\"> To export event data to a CSV file for manual tracking</label>\n      </div>\n\n      <!-- Q11 (Multi Answer) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. Select all steps required for accessing and setting up Google Calendar.</h3>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"openCalendar\" data-correct=\"true\">\n          Open Google Calendar via calendar.google.com\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"logInWithLg\" data-correct=\"true\">\n          Log in using lg@rh-s.com\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"mobileApp\" data-correct=\"true\">\n          Download the Google Calendar app on mobile devices if needed\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"useIE\">\n          Access via Internet Explorer\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"personalAccount\">\n          Log in using a personal Gmail account\n        </label>\n      </div>\n\n      <!-- Q12 (Multi Answer) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Select all steps necessary for creating an event in Google Calendar.</h3>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"createEvent\" data-correct=\"true\">\n          Click “Create” → Select “Event” → Click “More options”\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"enterTitle\" data-correct=\"true\">\n          Enter the event title in the format \"Company Name - Remote Helpers (TEST)\"\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"setDuration\" data-correct=\"true\">\n          Set the event duration to 30 minutes\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"addReminder\" data-correct=\"true\">\n          Add a 20-minute notification reminder\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"randomTitle\">\n          Use an arbitrary event title\n        </label>\n      </div>\n\n      <!-- Q13 (Multi Answer) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. Select all reasons for creating separate calendars in Google Calendar.</h3>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"separation\" data-correct=\"true\">\n          To keep personal and work events separate\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"visibility\" data-correct=\"true\">\n          To improve scheduling visibility\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"avoidOverlap\" data-correct=\"true\">\n          To avoid accidental overlaps\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"mergeEvents\">\n          To merge all events into one calendar\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"confuseTeam\">\n          To intentionally confuse team members\n        </label>\n      </div>\n\n      <!-- Q14 (Multi Answer) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Select all actions involved in syncing a Google Calendar event with the CRM.</h3>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"updateStatus\" data-correct=\"true\">\n          Change the lead status to “Event”\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"addNote\" data-correct=\"true\">\n          Add a brief note describing the meeting goal\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"logCommunication\" data-correct=\"true\">\n          Log the event in the Communication History\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"deleteCalendar\">\n          Delete the event from Google Calendar\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"updateContacts\">\n          Update the lead's contact status in the CRM\n        </label>\n      </div>\n\n      <!-- Q15 (Multi Answer) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Select all additional best practices for event management mentioned in the guide.</h3>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"setReminders\" data-correct=\"true\">\n          Set automated reminders for checking lead responses\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"confirmBeforeCall\" data-correct=\"true\">\n          Send confirmation messages 1 hour before the call\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"rescheduleIfNeeded\" data-correct=\"true\">\n          Reschedule the call if it didn’t happen as planned\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"ignoreTimeZones\">\n          Ignore time zone differences when scheduling\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"noFollowUp\">\n          Never follow up after the event\n        </label>\n      </div>\n\n      <button type=\"button\" id=\"submitButton\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    // Fisher–Yates shuffle for arrays\n    function shuffle(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n    \n    // Randomize answer labels for each question (excluding the user data block)\n    function randomizeAnswers() {\n      const questions = document.querySelectorAll('.question[data-points]:not([data-points=\"0\"])');\n      questions.forEach(question => {\n        const labels = Array.from(question.querySelectorAll('label'));\n        const shuffled = shuffle(labels);\n        shuffled.forEach(label => label.parentNode.removeChild(label));\n        const heading = question.querySelector('h3');\n        shuffled.forEach(label => heading.parentNode.appendChild(label));\n      });\n    }\n    \n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 minutes (300 seconds)\n    const examName = \"Google Calendar Setup and Events Planning Exam\";\n    \n    // Date formatter: \"dd.mm.yyyy hh:mm\"\n    function formatDate(date) {\n      const options = { \n        day: \"2-digit\", month: \"2-digit\", year: \"numeric\", \n        hour: \"2-digit\", minute: \"2-digit\", hour12: false \n      };\n      const formatted = date.toLocaleString(\"en-GB\", options);\n      return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n    }\n    \n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      randomizeAnswers();\n      startTimer();\n    }\n    \n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const secs = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(secs).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n    \n    function calculateScore(timeout = false) {\n      clearInterval(timer);\n      const submitBtn = document.getElementById('submitButton');\n      if (submitBtn) {\n        submitBtn.style.display = 'none';\n      }\n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        if (points === 0) return;\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(inp => {\n          if (inp.checked) selectedValues.push(inp.value);\n          if (inp.dataset.correct === \"true\") correctValues.push(inp.value);\n        });\n        if (selectedValues.length !== correctValues.length || !selectedValues.every(val => correctValues.includes(val))) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(inp => {\n            if (inp.dataset.correct === \"true\") {\n              inp.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsed = `${Math.floor(seconds / 60)}m ${seconds % 60}s`;\n      let resultHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsed}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      resultHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='https://hook.eu1.make.com/jcjl176nvrhlm4ag7qiixjzssxqdbl5n'\">Read Again</button>\n        <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n      `;\n      document.getElementById('result').innerHTML = resultHTML;\n      \n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n      const postData = {\n        fullName,\n        profession,\n        recruiter,\n        day: \"5\",\n        examName,\n        scoreObtained: totalPoints,\n        scoreTotal: maxPoints,\n        timeUsed: seconds,\n        timeTotal: timeLimit,\n        date: formatDate(new Date())\n      };\n      \n      fetch(\"https://hook.eu1.make.com/2yp4rtezjxi2o6fi2jouedn3i7sgxss1\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(postData)\n      })\n      .then(res => res.text())\n      .then(data => console.log(\"POST response:\", data))\n      .catch(err => console.error(\"Error in POST:\", err));\n      \n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n    \n    // loadTask() replaces the exam view with task instructions, an optional link input, and a \"Mark as done\" button.\n    function loadTask() {\n      const taskMarkdown = `# Follow-Up Sequences Task\n\nThis task will assess your ability to structure effective follow-up sequences, create customized follow-up messages for both LinkedIn and email, and accurately log these follow-ups in the CRM. You will complete practical exercises that demonstrate your ability to nurture leads efficiently.\n\n---\n\n# 🔹 Task 1: Build a Follow-Up Sequence for a Potential Client\n\n## Scenario:\nYou reached out to Lisa Carter, Director of Marketing at ShopEase (an e-commerce company) but haven’t received a response.\n\n## Steps to Complete:\n1. **Design a Structured Follow-Up Sequence:**\n   - **First Follow-Up (Email):** 3 days after initial outreach.\n   - **Second Follow-Up (LinkedIn):** 2 days after the first follow-up.\n   - **Third Follow-Up (Email):** 5 days after the second follow-up (adding extra value, e.g., a case study).\n   - **Final Follow-Up (LinkedIn):** 10 days after the third follow-up.\n2. **Generate and Refine Messages:**\n   - Use an AI tool to generate an initial follow-up message for each touchpoint.\n   - Manually refine each message to enhance personalization and clarity.\n   \n## Expected Output:\n- A document detailing your complete follow-up sequence for both email and LinkedIn touchpoints.\n- Include both the AI-generated and manually refined versions of each message.\n\n---\n\n# 🔹 Task 2: Log Follow-Ups in CRM\n\n## Steps to Complete:\n1. **Open a Lead Profile:**\n   - Select a lead profile from the CRM.\n2. **Update the Lead’s Status:**\n   - Change the status based on the latest interaction (e.g., Interested, Follow-Up Later, Not Interested).\n3. **Fill in the Communication & Follow-Up Section:**\n   - **Date of Communication**\n   - **Communication Type:** Follow-Up\n   - **Notes:** Summarize the conversation and outline next steps.\n   - **Next Follow-Up Date:** Set a reminder for future engagement.\n4. **Capture a Screenshot:**\n   - Take a screenshot of the updated CRM entry showing the follow-up details.\n\n## Expected Output:\n- A screenshot of the updated CRM entry with follow-up details and your notes.\n\n---\n\n# 📌 Submission Instructions\n\n- **Document Format:** Google Docs or Word.\n- **Structure the Document as Follows:**\n  1. **Task 1:** Follow-Up Sequence (Include your complete sequence with both AI-generated and manually refined messages)\n  2. **Task 2:** CRM Follow-Up Logging (Include a screenshot of the updated CRM entry along with your notes)\n\n---\n\n# 💡 Bonus Challenge\n- **Additional Touchpoint:** Propose one extra touchpoint that could further increase response rates.\n- **Message Analysis:** Compare the AI-generated and manually refined messages, and explain which version is more effective and why.\n\nBy completing this task, you will demonstrate your ability to create structured follow-up sequences, log CRM interactions accurately, and schedule timely reminders for effective lead engagement.`;\n      \n      const parsedMarkdown = parseMarkdown(taskMarkdown);\n      document.body.innerHTML = `\n        <div style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding: 2rem;\">\n          ${parsedMarkdown}\n          <div style=\"margin-top: 2rem;\">\n            <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional: paste your task result link here:</label>\n            <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://docs.google.com/...\" style=\"width: 100%; padding: 8px; margin-top: 4px;\">\n            <button id=\"markDoneBtn\">\n              <svg id=\"markDoneBtnIcon\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"\n                   viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>\n              </svg>\n              Mark as done\n            </button>\n          </div>\n        </div>\n      `;\n      \n      const markDoneBtn = document.getElementById(\"markDoneBtn\");\n      const markDoneBtnIcon = document.getElementById(\"markDoneBtnIcon\");\n      let isDone = false;\n      \n      markDoneBtn.addEventListener(\"click\", function() {\n        isDone = !isDone;\n        if (isDone) {\n          markDoneBtnIcon.innerHTML = `\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 11l3 3L22 4\" />\n            <path d=\"M4 4h16v16H4z\" />\n          `;\n          const taskLink = document.getElementById(\"taskLinkInput\").value.trim() || \"\";\n          fetch(\"https://hook.eu1.make.com/dy57247xgkw7criy6ind4j78ej3yqrx7\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ link: taskLink })\n          })\n          .then(response => response.text())\n          .then(data => {\n            console.log(\"Task completed webhook sent:\", data);\n            // Optionally disable the button after marking as done:\n            // markDoneBtn.disabled = true;\n          })\n          .catch(err => console.error(\"Error sending task completed webhook:\", err));\n        } else {\n          markDoneBtnIcon.innerHTML = `<rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>`;\n        }\n      });\n    }\n    \n    // Markdown parser: converts markdown headings into collapsible <details> elements (collapsed by default)\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line + \"<br>\";\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -220,
        -120
      ],
      "id": "85577be6-09b0-430c-b7b0-5ba95d2f7388",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "fabc8b61-d2d3-475e-8b04-05a6639cadcb",
  "triggerCount": 0,
  "tags": []
}