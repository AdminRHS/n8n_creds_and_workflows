{
  "createdAt": "2025-06-11T08:53:37.339Z",
  "updatedAt": "2025-06-11T08:53:42.099Z",
  "id": "lNnoqsZdX3eIsqHT",
  "name": "AppTest-Personas_in_prompting",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "Onboarding/PromptEngineering/Tests/PersonasInPrompting",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -260,
        -100
      ],
      "id": "27ffde74-427f-43da-8f51-ca80f003c98a",
      "name": "Webhook",
      "webhookId": "4010b351-c456-4bc7-a8c6-8772ee1e1e66"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>Personas in Prompting</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    /* Radio buttons (single-answer) */\n    input[type=\"radio\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n    }\n    /* Checkboxes (multi-answer) */\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    /* Replace read-only profession input with dropdown */\n    select[name=\"profession\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n      background: #fff;\n      color: #4A4A4A;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>Personas in Prompting</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button id=\"startExamBtn\" onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>Personas in Prompting</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <select name=\"profession\">\n            <option value=\"3d designer\">3d designer</option>\n            <option value=\"account manager\">account manager</option>\n            <option value=\"affiliate manager\">affiliate manager</option>\n            <option value=\"analyst\">analyst</option>\n            <option value=\"animator\">animator</option>\n            <option value=\"back end developer\">back end developer</option>\n            <option value=\"chat operator\">chat operator</option>\n            <option value=\"content manager\">content manager</option>\n            <option value=\"copywriter\">copywriter</option>\n            <option value=\"email marketer\">email marketer</option>\n            <option value=\"event manager\">event manager</option>\n            <option value=\"financial manager\">financial manager</option>\n            <option value=\"front end developer\">front end developer</option>\n            <option value=\"full stack developer\">full stack developer</option>\n            <option value=\"graphic designer\">graphic designer</option>\n            <option value=\"hr manager\">hr manager</option>\n            <option value=\"illustrator\">illustrator</option>\n            <option value=\"influencer manager\">influencer manager</option>\n            <option value=\"interior designer\">interior designer</option>\n            <option value=\"investment manager\">investment manager</option>\n            <option value=\"lead generator\">lead generator</option>\n            <option value=\"linkbuilder\">linkbuilder</option>\n            <option value=\"media buyer\">media buyer</option>\n            <option value=\"mobile developer\">mobile developer</option>\n            <option value=\"mobile video editor\">mobile video editor</option>\n            <option value=\"motion designer\">motion designer</option>\n            <option value=\"personal assistant\">personal assistant</option>\n            <option value=\"ppc specialist\">ppc specialist</option>\n            <option value=\"pr manager\">pr manager</option>\n            <option value=\"project manager\">project manager</option>\n            <option value=\"proofreader\">proofreader</option>\n            <option value=\"qa\">qa</option>\n            <option value=\"recruiter\">recruiter</option>\n            <option value=\"sales manager\">sales manager</option>\n            <option value=\"seo manager\">seo manager</option>\n            <option value=\"social media manager\">social media manager</option>\n            <option value=\"system administrator\">system administrator</option>\n            <option value=\"targetologist\">targetologist</option>\n            <option value=\"tourism manager\">tourism manager</option>\n            <option value=\"ui/ux designer\">ui/ux designer</option>\n            <option value=\"video editor\">video editor</option>\n            <option value=\"web designer\">web designer</option>\n            <option value=\"wordpress designer\">wordpress designer</option>\n          </select>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Question 1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. What are personas in prompting?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"A\"> A) Real-time user behavior analytics</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"B\" data-correct=\"true\"> B) Predefined fictional profiles to guide AI interactions</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"C\"> C) Random response generators</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"D\"> D) AI training datasets</label>\n      </div>\n\n      <!-- Question 2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. What is the primary purpose of using personas in prompting?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"A\"> A) To reduce AI computational load</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"B\"> B) To standardize responses across all users</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"C\" data-correct=\"true\"> C) To align AI output with specific tones, styles, or expertise</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"D\"> D) To replace human intervention in conversations</label>\n      </div>\n\n      <!-- Question 3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. When designing a persona for a customer service chatbot, which factor is most critical?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"A\"> A) Use of technical jargon</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"B\"> B) Emphasis on humor and sarcasm</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"C\" data-correct=\"true\"> C) Empathy and clarity in communication</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"D\"> D) Detailed knowledge of quantum physics</label>\n      </div>\n\n      <!-- Question 4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. Which design consideration is essential when creating a persona for a children’s educational app?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"A\"> A) Complex vocabulary</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"B\"> B) Authority-driven tone</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"C\" data-correct=\"true\"> C) Playful language and simplicity</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"D\"> D) Focus on political discourse</label>\n      </div>\n\n      <!-- Question 5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. Which statement is true about designing personas for different use cases?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"A\"> A) Personas should be reused verbatim across all industries.</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"B\" data-correct=\"true\"> B) Demographics and context must shape the persona’s traits.</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"C\"> C) Use cases have no impact on persona design.</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"D\"> D) Only fictional characters qualify as personas.</label>\n      </div>\n\n      <!-- Question 6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. How does personalization via personas influence AI responses?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"A\"> A) It ensures responses remain generic.</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"B\"> B) It restricts the AI’s creativity.</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"C\" data-correct=\"true\"> C) It tailors outputs to match predefined traits and goals.</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"D\"> D) It prioritizes speed over accuracy.</label>\n      </div>\n\n      <!-- Question 7 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. Which outcome is likely when using a highly detailed persona?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"A\"> A) Increased randomness in AI responses</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"B\" data-correct=\"true\"> B) Consistent and context-aware outputs</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"C\"> C) Reduced relevance to user queries</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"D\"> D) Greater hardware resource consumption</label>\n      </div>\n\n      <!-- Question 8 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. Which of the following is an effective example of persona-based prompting?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"A\"> A) \"Write a 500-word essay.\"</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"B\" data-correct=\"true\"> B) \"Answer as a marine biologist explaining coral reefs to high school students.\"</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"C\"> C) \"Summarize this article in French.\"</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"D\"> D) \"Create a list of random names.\"</label>\n      </div>\n\n      <!-- Question 9 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. Which persona would best generate a technical response about cybersecurity?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q9\" value=\"A\"> A) A poet inspired by nature</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"B\" data-correct=\"true\"> B) A software engineer specializing in encryption</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"C\"> C) A grocery store manager</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"D\"> D) A sports commentator</label>\n      </div>\n\n      <!-- Question 10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. An effective persona for simplifying complex historical events would be:<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"A\"> A) A historian using academic jargon</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"B\" data-correct=\"true\"> B) A teacher breaking down concepts for teenagers</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"C\"> C) A politician campaigning for office</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"D\"> D) A musician describing rhythm patterns</label>\n      </div>\n\n      <!-- Question 11 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. What is a common mistake when creating personas?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q11\" value=\"A\" data-correct=\"true\"> A) Defining overly broad or vague traits</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"B\"> B) Aligning personas with target audience needs</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"C\"> C) Including context-specific details</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"D\"> D) Testing personas iteratively</label>\n      </div>\n\n      <!-- Question 12 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Which error occurs when personas rely on stereotypes?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q12\" value=\"A\"> A) Improved cultural sensitivity</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"B\"> B) Enhanced user relatability</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"C\" data-correct=\"true\"> C) Reinforced biases and inaccurate outputs</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"D\"> D) Streamlined persona development</label>\n      </div>\n\n      <!-- Question 13 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. What mistake arises from ignoring the user’s familiarity with a topic?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q13\" value=\"A\"> A) Responses become more engaging</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"B\" data-correct=\"true\"> B) Outputs are either too basic or too advanced</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"C\"> C) AI interaction speed improves</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"D\"> D) Personalization accuracy increases</label>\n      </div>\n\n      <!-- Question 14 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. How do personas enhance AI interactions?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q14\" value=\"A\"> A) By eliminating the need for user input</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"B\" data-correct=\"true\"> B) By providing contextual guardrails for relevant outputs</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"C\"> C) By randomizing response structures</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"D\"> D) By reducing response length</label>\n      </div>\n\n      <!-- Question 15 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. What is a best practice for using personas to improve AI interactions?<br>\n        </h3>\n        <label><input type=\"radio\" name=\"q15\" value=\"A\"> A) Use the same persona for every query.</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"B\"> B) Avoid mentioning the persona explicitly.</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"C\" data-correct=\"true\"> C) Test and refine personas based on feedback.</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"D\"> D) Prioritize quantity over specificity in traits.</label>\n      </div>\n\n      <button id=\"submitBtn\" type=\"button\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    // Fisher–Yates shuffle function\n    function shuffle(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n\n    // Randomize answer labels (excluding the user data block)\n    function randomizeAnswers() {\n      const questions = document.querySelectorAll('.question[data-points]:not([data-points=\"0\"])');\n      questions.forEach(question => {\n        const labels = Array.from(question.querySelectorAll('label'));\n        const shuffled = shuffle(labels);\n        shuffled.forEach(label => label.parentNode.removeChild(label));\n        const heading = question.querySelector('h3');\n        shuffled.forEach(label => heading.parentNode.appendChild(label));\n      });\n    }\n\n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 minutes\n    const examName = \"Personas in Prompting\";\n\n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      randomizeAnswers();\n      startTimer();\n    }\n\n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const rem = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(rem).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n\n    // Formats date as \"dd.mm.yyyy hh:mm\"\n    function formatDate(date) {\n      const options = {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: false\n      };\n      const formatted = date.toLocaleString(\"en-GB\", options);\n      return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n    }\n\n    function calculateScore(timeout = false) {\n      const submitButton = document.getElementById('submitBtn');\n      if (submitButton) {\n        submitButton.style.display = 'none';\n      }\n      clearInterval(timer);\n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        if (points === 0) return; // Skip user info block\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(inp => {\n          if (inp.checked) selectedValues.push(inp.value);\n          if (inp.dataset.correct === \"true\") correctValues.push(inp.value);\n        });\n        if (\n          selectedValues.length !== correctValues.length ||\n          !selectedValues.every(val => correctValues.includes(val))\n        ) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(inp => {\n            if (inp.dataset.correct === \"true\") {\n              inp.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsed = `${Math.floor(seconds / 60)}m ${seconds % 60}s`;\n\n      let resultsHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsed}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      resultsHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='#'\">Read Again</button>\n        <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n      `;\n      document.getElementById('result').innerHTML = resultsHTML;\n\n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n\n      // Include day parameter as \"1\" for Day 1\n      const postData = {\n        fullName,\n        profession,\n        recruiter,\n        day: \"1\",\n        examName,\n        scoreObtained: totalPoints,\n        scoreTotal: maxPoints,\n        timeUsed: seconds,\n        timeTotal: timeLimit,\n        date: formatDate(new Date())\n      };\n\n      try {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n        fetch(\"https://auto.crm-s.com/webhook/Onboarding/Update\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json, text/plain, */*\"\n          },\n          body: JSON.stringify(postData),\n          mode: \"cors\"\n        })\n        .then(async (res) => {\n          console.log(\"POST response status:\", res.status);\n          const text = await res.text();\n          console.log(\"POST response body:\", text);\n        })\n        .catch(err => {\n          console.error(\"Error in POST:\", err);\n        });\n      } catch (error) {\n        console.error(\"Error submitting quiz results:\", error);\n      }\n    }\n\n    // loadTask() replaces the quiz view with task instructions\n    function loadTask() {\n      const taskMarkdown = `# 🛠 Personas in Prompting - Practice Task\n\n🔹 Design a project plan for using personas to improve AI prompting. Focus on:\n- Defining target personas and their specific traits.\n- Outlining how personas guide the tone, style, and expertise in AI responses.\n- Proposing methods for testing and refining personas based on user feedback.\n- Addressing potential pitfalls, such as overgeneralization or bias.\n\n# ✅ Steps:\n\n1. Define the Project Goal and Purpose: \n   Clearly state the objective of using personas in AI prompting.  \n   (Example: Improve the clarity and relevance of AI responses in customer support by having the AI respond as a specialized expert.)  \n   Explain why using a persona can help (e.g., by ensuring focused expertise and consistent tone).\n\n2. Identify and Describe Target Personas:  \n   List at least three target personas relevant to your use case. For each persona, specify key traits, such as:  \n   - Professional Background: Years of experience and area of expertise.  \n   - Specialization: Specific skills or focus areas (e.g., technical, creative, customer service).  \n   - Communication Style: Formal, technical, casual, or creative.  \n   Use examples from the theory provided to guide your descriptions.\n\n3. Outline Persona-Based Prompting Strategies: \n   Explain how each persona will influence the AI’s tone, style, and expertise.  \n   Provide one sample prompt for each persona to show how the AI should respond (Example: \"Act as a senior technical content writer with 10 years of experience in SaaS products. Explain the benefits of microservices architecture in detail.\")\n\n4. Develop a Testing and Feedback Plan:  \n   Propose methods to test the effectiveness of each persona-based prompt.  \n   Define criteria for success (e.g., clarity, relevance, consistency) and explain how you will collect and analyze user feedback.  \n   Outline an iterative process for refining the prompts based on real-world responses.\n\n5. Create a Visual Summary:  \n   Build a table or diagram to organize your persona information.  \n   For example, create a table with these columns:  \n   - Persona Name\n   - Expertise/Background  \n   - Communication Style \n   - Sample Prompt \n   - Notes/Feedback \n   Optionally, use tools like Google Sheets or online diagramming tools to visualize your plan.\n\n6. Address Potential Pitfalls: \n   Identify common issues such as overgeneralization and bias.  \n   Explain strategies to avoid these pitfalls, such as focusing on the most relevant traits and keeping persona details concise and directly related to the task.\n\n7. Reflection and Iteration:  \n   Conclude with a brief plan on how you will monitor the performance of persona-based prompts over time.  \n   Discuss how you plan to iterate on the personas and prompt structure based on ongoing feedback and real-world interactions.\n\n# ✏️ When finished, mark the checkbox and optionally provide a link to your visual summary (table/diagram) in draw.io or google spreadsheets that displays your completed project plan.`;\n      \n      const parsedMarkdown = parseMarkdown(taskMarkdown);\n      document.body.innerHTML = `\n        <div style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding: 2rem; max-width: 800px; margin: 0 auto;\">\n          ${parsedMarkdown}\n          <div style=\"margin-top: 2rem;\">\n            <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional link to your work:</label>\n            <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://app.diagrams.net...\" style=\"width: 100%; padding: 8px; margin: 4px 0 1rem;\">\n            <input type=\"checkbox\" id=\"taskCompletedCheckbox\">\n            <label for=\"taskCompletedCheckbox\">Task Completed</label>\n          </div>\n        </div>\n      `;\n\n      const checkbox = document.getElementById(\"taskCompletedCheckbox\");\n      checkbox.addEventListener(\"change\", function() {\n        if (checkbox.checked) {\n          const taskLink = document.getElementById(\"taskLinkInput\").value.trim() || \"\";\n          checkbox.disabled = true;\n          try {\n            fetch(\"https://auto.crm-s.com/webhook/Onboarding/UpdateTaskTable\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json, text/plain, */*\"\n              },\n              body: JSON.stringify({\n                examName: \"Personas in Prompting\",\n                day: \"1\",\n                link: taskLink,\n                date: formatDate(new Date())\n              }),\n              mode: \"cors\"\n            })\n            .then(async (res) => {\n              console.log(\"Task completed webhook status:\", res.status);\n              const text = await res.text();\n              console.log(\"Task completed webhook body:\", text);\n            })\n            .catch(err => {\n              console.error(\"Error sending task completed webhook:\", err);\n              alert(\"Your task has been marked as complete, but there was an issue connecting to the server. Your instructor will be notified.\");\n            });\n          } catch (error) {\n            console.error(\"Error marking task as complete:\", error);\n            alert(\"Your task has been marked as complete, but there was an issue connecting to the server. Your instructor will be notified.\");\n          }\n        }\n      });\n    }\n\n    // Markdown parser: converts headings (#, ##, ###, ####) into <details> blocks\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line + \"<br>\";\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -40,
        -100
      ],
      "id": "5aa11cc4-5ed4-40aa-84d8-86aa34457af0",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "f4f0a6b0-71f3-420c-a126-e7961512ba5f",
  "triggerCount": 0,
  "tags": []
}