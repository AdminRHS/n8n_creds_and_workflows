{
  "createdAt": "2025-06-11T08:51:42.375Z",
  "updatedAt": "2025-06-11T08:51:45.575Z",
  "id": "zKSmkIn8yPfTotJm",
  "name": "AppTest-Generate_email_templates",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/leadgeneration/tests/GenerateEmailTemplates",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -180,
        -60
      ],
      "id": "a5646255-fee4-4cd0-bdee-cd52671cdc8b",
      "name": "Webhook",
      "webhookId": "fe6e435a-a89a-4b77-90cf-40ca6baa93e4"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>Generate email templates</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    input[type=\"radio\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n    }\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    input[disabled] {\n      background: #f3f3f3;\n      color: #888;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>Generate email templates</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button id=\"startButton\" onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>Generate email templates</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"Lead Generator\" disabled>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Q1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. Which statement correctly differentiates emails from LinkedIn messages?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"sameLength\">\n          They should be the same length since they serve the same purpose\n        </label>\n        <label><input type=\"radio\" name=\"q1\" value=\"shorterEmails\">\n          Emails must be shorter than LinkedIn messages\n        </label>\n        <label><input type=\"radio\" name=\"q1\" value=\"moreDetail\" data-correct=\"true\">\n          Emails allow for more detail, personalization, and a professional format\n        </label>\n        <label><input type=\"radio\" name=\"q1\" value=\"casualEmails\">\n          Emails should use a more casual tone than LinkedIn messages\n        </label>\n      </div>\n\n      <!-- Q2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. Why is the subject line critical in email outreach?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"autoReply\">\n          It ensures the recipient sets an auto-reply\n        </label>\n        <label><input type=\"radio\" name=\"q2\" value=\"previewDecider\" data-correct=\"true\">\n          It determines whether recipients open or ignore your email\n        </label>\n        <label><input type=\"radio\" name=\"q2\" value=\"noDiff\">\n          The subject line has no major impact on email performance\n        </label>\n        <label><input type=\"radio\" name=\"q2\" value=\"compulsory50chars\">\n          It is compulsory to have exactly 50 characters\n        </label>\n      </div>\n\n      <!-- Q3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. Which subject line follows the recommended best practices?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"genericSubject\">\n          \"Business Opportunity for Growth\"\n        </label>\n        <label><input type=\"radio\" name=\"q3\" value=\"customerName\" data-correct=\"true\">\n          \"[First Name], Let’s Discuss Hiring Remote Talent\"\n        </label>\n        <label><input type=\"radio\" name=\"q3\" value=\"allCaps\">\n          \"READ THIS IMPORTANT NOTICE NOW\"\n        </label>\n        <label><input type=\"radio\" name=\"q3\" value=\"random\">\n          \"We can help, contact me...\"\n        </label>\n      </div>\n\n      <!-- Q4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. Which best describes the recommended email structure?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"randomFlow\">\n          Random flow with no formal introduction or CTA\n        </label>\n        <label><input type=\"radio\" name=\"q4\" value=\"bodyOnly\">\n          Body text only, skipping greetings and closings\n        </label>\n        <label><input type=\"radio\" name=\"q4\" value=\"formalSections\" data-correct=\"true\">\n          Greeting, introduction, value offer, details, CTA, and signature\n        </label>\n        <label><input type=\"radio\" name=\"q4\" value=\"casualDisclaimer\">\n          Casual greeting, disclaimers, and a single question\n        </label>\n      </div>\n\n      <!-- Q5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. Which statement about follow-up emails is correct?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"noFollowUp\">\n          You should never follow up on emails\n        </label>\n        <label><input type=\"radio\" name=\"q5\" value=\"immediateHound\">\n          Follow up immediately the same day\n        </label>\n        <label><input type=\"radio\" name=\"q5\" value=\"3to4Days\" data-correct=\"true\">\n          Send a follow-up 3–4 days after the initial email\n        </label>\n        <label><input type=\"radio\" name=\"q5\" value=\"endApology\">\n          Apologize at the end for contacting them again\n        </label>\n      </div>\n\n      <!-- Q6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. Which scenario calls for a “Thank You Email” template?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"coldLead\">\n          When sending a cold email to a new lead\n        </label>\n        <label><input type=\"radio\" name=\"q6\" value=\"afterCall\" data-correct=\"true\">\n          After a productive call or meeting to express gratitude\n        </label>\n        <label><input type=\"radio\" name=\"q6\" value=\"internalTeam\">\n          When sharing monthly metrics with your internal team\n        </label>\n        <label><input type=\"radio\" name=\"q6\" value=\"receivedFunds\">\n          When receiving funds from a client’s invoice\n        </label>\n      </div>\n\n      <!-- Q7 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. Which part of the email should you use to propose scheduling a meeting or call?</h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"introduction\">\n          Introduction\n        </label>\n        <label><input type=\"radio\" name=\"q7\" value=\"valueOffer\">\n          Value Offer\n        </label>\n        <label><input type=\"radio\" name=\"q7\" value=\"closing\">\n          Closing\n        </label>\n        <label><input type=\"radio\" name=\"q7\" value=\"cta\" data-correct=\"true\">\n          CTA (Call to Action)\n        </label>\n      </div>\n\n      <!-- Q8 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. Where should you log email communications for organized tracking?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"linkedInMessages\">\n          In your LinkedIn Messages\n        </label>\n        <label><input type=\"radio\" name=\"q8\" value=\"crmLogging\" data-correct=\"true\">\n          In your CRM → Company Card → “Communications” tab\n        </label>\n        <label><input type=\"radio\" name=\"q8\" value=\"socialMedia\">\n          Social media comments or direct messages\n        </label>\n        <label><input type=\"radio\" name=\"q8\" value=\"randomStickyNotes\">\n          On sticky notes around your office\n        </label>\n      </div>\n\n      <!-- Q9 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. Why should you use AES-256 encryption when sending emails?</h3>\n        <label><input type=\"radio\" name=\"q9\" value=\"noEncrypt\">\n          Encryption isn’t recommended for business emails\n        </label>\n        <label><input type=\"radio\" name=\"q9\" value=\"sinceDocMention\">\n          The guide mentions it for LinkedIn messages\n        </label>\n        <label><input type=\"radio\" name=\"q9\" value=\"redundantIT\">\n          It’s redundant as your ISP already handles encryption\n        </label>\n        <label><input type=\"radio\" name=\"q9\" value=\"notInGuide\" data-correct=\"true\">\n          The guide doesn’t mention email encryption specifically, so this is a trick question\n        </label>\n      </div>\n\n      <!-- Q10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. Which advantage does AI (like ChatGPT) provide for email content generation?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"autoClick\">\n          It automatically clicks “Send” for you\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"limitVariation\">\n          It limits message variations to maintain consistency\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"fasterCreation\" data-correct=\"true\">\n          It speeds up template creation and allows testing different message versions\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"noTracking\">\n          It automatically tracks open and reply rates in your CRM\n        </label>\n      </div>\n\n      <!-- Q11 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. Select all recommended elements of an email subject line.</h3>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"Under50Chars\" data-correct=\"true\">\n          Keep it under 50 characters\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"Generic\">\n          Use generic words like “Hey,” “Hello,” or “Important” only\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"Personalize\" data-correct=\"true\">\n          Personalize when possible (mention name or company)\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"OfferValue\" data-correct=\"true\">\n          Offer value or create curiosity\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"CapsLock\">\n          Write in all caps for emphasis\n        </label>\n      </div>\n\n      <!-- Q12 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Which items should you include in the “Details” section of an email?</h3>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"Services\" data-correct=\"true\">\n          A brief explanation of your services\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"LongEssay\">\n          A 2,000-word essay about your company’s history\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"CaseStudies\" data-correct=\"true\">\n          A short mention of case studies or key benefits\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"RandomRecipe\">\n          A random recipe or unrelated personal anecdote\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"LinksIfRelevant\" data-correct=\"true\">\n          Relevant links to your website or portfolio\n        </label>\n      </div>\n\n      <!-- Q13 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. Select all scenarios where a \"Follow-Up Email\" is useful.</h3>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"NoResponse\" data-correct=\"true\">\n          When you haven’t received a response 3–4 days after the first email\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"ImmediateSecond\">\n          Immediately after sending the first email\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"NewConnection\">\n          When first connecting with someone on LinkedIn\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"MultipleReminders\" data-correct=\"true\">\n          As a second reminder if you still don’t hear back\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"NoUse\">\n          Never—follow-ups are discouraged in professional settings\n        </label>\n      </div>\n\n      <!-- Q14 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Select all statements about CRM logging best practices for emails.</h3>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"LogCommunications\" data-correct=\"true\">\n          Always log your email communications in the CRM\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"NoDaytime\">\n          Only log emails sent before noon\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"FollowUpReminders\" data-correct=\"true\">\n          Set follow-up reminders in the CRM after sending an email\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"IgnoreReplies\">\n          Don’t bother updating the CRM if someone replies\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"ChannelSelection\" data-correct=\"true\">\n          Choose “Gmail” or the appropriate channel when logging\n        </label>\n      </div>\n\n      <!-- Q15 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Which mistakes in email outreach and their fixes are correctly paired?</h3>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"TooGeneric\" data-correct=\"true\">\n          Mistake: Too generic → Fix: Personalize with name & details\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"TooLong\" data-correct=\"true\">\n          Mistake: Too long → Fix: Keep it under 250 words\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"NoCTA\" data-correct=\"true\">\n          Mistake: No Call-to-Action → Fix: Always include next steps\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"NoFollowUp\" data-correct=\"true\">\n          Mistake: Not following up → Fix: Send a reminder after 3–4 days\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"SalesyWanted\">\n          Mistake: Not salesy enough → Fix: Add more pushy sales phrases\n        </label>\n      </div>\n\n      <button id=\"submitExamBtn\" type=\"button\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    // Fisher–Yates Shuffle\n    function shuffle(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n\n    function randomizeAnswers() {\n      const questions = document.querySelectorAll('.question[data-points]:not([data-points=\"0\"])');\n      questions.forEach(question => {\n        const labels = Array.from(question.querySelectorAll('label'));\n        const shuffledLabels = shuffle(labels);\n        shuffledLabels.forEach(lbl => lbl.parentNode.removeChild(lbl));\n        const heading = question.querySelector('h3');\n        shuffledLabels.forEach(lbl => heading.parentNode.appendChild(lbl));\n      });\n    }\n\n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 minutes\n    const examName = \"Generate email templates\";\n\n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      randomizeAnswers();\n      startTimer();\n    }\n\n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const remain = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(remain).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n\n    function calculateScore(timeout = false) {\n      const submitBtn = document.getElementById('submitExamBtn');\n      if (submitBtn) {\n        submitBtn.style.display = 'none';\n      }\n      clearInterval(timer);\n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        if (points === 0) return;\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(input => {\n          if (input.checked) selectedValues.push(input.value);\n          if (input.dataset.correct === \"true\") correctValues.push(input.value);\n        });\n        if (\n          selectedValues.length !== correctValues.length ||\n          !selectedValues.every(val => correctValues.includes(val))\n        ) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(input => {\n            if (input.dataset.correct === \"true\") {\n              input.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsedSec = seconds;\n      const timeUsed = `${Math.floor(timeUsedSec / 60)}m ${timeUsedSec % 60}s`;\n      let resultHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsed}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      resultHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='https://hook.eu1.make.com/jcjl176nvrhlm4ag7qiixjzssxqdbl5n'\">Read Again</button>\n        <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n      `;\n      document.getElementById('result').innerHTML = resultHTML;\n      \n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n      const postData = {\n        fullName,\n        profession,\n        recruiter,\n        day: \"3\",\n        examName,\n        scoreObtained: totalPoints,\n        scoreTotal: maxPoints,\n        timeUsed: timeUsedSec,\n        timeTotal: timeLimit\n      };\n      fetch(\"https://hook.eu1.make.com/2yp4rtezjxi2o6fi2jouedn3i7sgxss1\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(postData)\n      })\n      .then(response => response.text())\n      .then(data => console.log(\"POST response:\", data))\n      .catch(err => console.error(\"Error in POST:\", err));\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n\n    // loadTask() заменяет интерфейс экзамена на инструкции задачи с полем для ссылки и чекбоксом\n    function loadTask() {\n      const taskMarkdown = `# 🛠 Objective\n\nThis task will assess your ability to write effective email templates for lead generation using best practices, personalization, and AI-powered assistance. You will complete three practical exercises, crafting professional, structured emails tailored to different outreach scenarios.\n\n# 🔹 Task: Write Personalized Email Templates Using AI & Best Practices\n\n## ✅ Steps to Complete:\n1. **Generate Email Templates:**  \n   Use ChatGPT (or another AI tool) to generate email templates for the assigned scenarios.\n2. **Refine the AI-Generated Emails:**  \n   Improve the following aspects:\n   - **Personalization:** Mention the company name, industry, or the lead’s challenges.\n   - **Clarity & Structure:** Include a greeting, a value offer, a call-to-action (CTA), and a closing.\n   - **Engagement:** Ensure the message is compelling yet professional.\n3. **Create Three Email Templates for the Following Scenarios:**\n   - **Scenario 1:** Cold outreach to a Tech Startup CEO  \n     *(Sarah Collins, CEO of TechBoost, an AI-driven marketing firm)*\n   - **Scenario 2:** Follow-up email after a LinkedIn connection with a Marketing Director  \n     *(Lisa Carter, Director of Marketing at ShopEase, an e-commerce company)*\n   - **Scenario 3:** Thank-you email after a call with an HR Manager  \n     *(Michael Reynolds, Head of Talent at CreativeAds, an advertising agency)*\n4. **Submit Both Versions:**  \n   Provide both the original AI-generated email and your refined version for each scenario.\n\n## ✅ Submission:\nSubmit your three email templates (both AI-generated and refined versions) in one document.\n\n# 📌 Submission Instructions:\n- **Document Format:** Google Docs.\n- **Structure the Document as Follows:**\n  1. **Scenario 1:** Cold Outreach (AI-generated + refined email)\n  2. **Scenario 2:** Follow-Up After LinkedIn Connection (AI-generated + refined email)\n  3. **Scenario 3:** Thank-You Email (AI-generated + refined email)\n\n# 💡 Bonus Challenge:\n- **Analysis:** Explain how using AI for email generation helped improve efficiency.\n- **Additional Email Type:** Suggest one more email type (e.g., proposal follow-up, scheduling a second call) and write an original email template.\n\nBy completing this task, you will demonstrate your ability to craft compelling, professional email templates that drive engagement and conversions!`;\n      \n      const parsedMarkdown = parseMarkdown(taskMarkdown);\n      document.body.innerHTML = `\n        <div style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding: 2rem;\">\n          ${parsedMarkdown}\n          <div style=\"margin-top: 2rem;\">\n            <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional link:</label>\n            <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://docs.google.com/spreadsheets/...\" style=\"width: 100%; padding: 8px; margin: 4px 0 1rem;\">\n            <input type=\"checkbox\" id=\"taskCompletedCheckbox\">\n            <label for=\"taskCompletedCheckbox\">Task Completed</label>\n          </div>\n        </div>\n      `;\n      \n      const checkbox = document.getElementById(\"taskCompletedCheckbox\");\n      checkbox.addEventListener(\"change\", function() {\n        if (checkbox.checked) {\n          const taskLink = document.getElementById(\"taskLinkInput\").value.trim() || \"\";\n          fetch(\"https://hook.eu1.make.com/dy57247xgkw7criy6ind4j78ej3yqrx7\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ link: taskLink })\n          })\n          .then(response => response.text())\n          .then(data => {\n            console.log(\"Task completed webhook sent:\", data);\n            checkbox.disabled = true;\n          })\n          .catch(err => console.error(\"Error sending task completed webhook:\", err));\n        }\n      });\n    }\n\n    // Простой markdown-парсер, преобразующий заголовки в collapsible <details>\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line + \"<br>\";\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        40,
        -60
      ],
      "id": "5e25d08f-4cb7-4700-9ccc-54f903649e05",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "9f9aef1a-4c19-42cf-92ab-30b05d397a56",
  "triggerCount": 0,
  "tags": []
}