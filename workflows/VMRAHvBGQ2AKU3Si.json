{
  "createdAt": "2025-06-11T08:44:02.168Z",
  "updatedAt": "2025-06-11T08:44:06.431Z",
  "id": "VMRAHvBGQ2AKU3Si",
  "name": "AppTest-AI_observations_strong_points_for_usage",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/leadgeneration/tests/AIObservationsStrongPointsForUsage",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -400,
        -80
      ],
      "id": "7b540572-343f-48b0-a046-1084594f79be",
      "name": "Webhook",
      "webhookId": "e327d277-cb8a-4dbb-9625-ead1c500b788"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <!-- Updated Title -->\n  <title>AI observations (strong points for usage)</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    input[type=\"radio\"],\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    /* \"Mark as done\" button styling for the task section */\n    #markDoneBtn {\n      margin-top: 16px;\n      background: var(--green);\n      padding: 12px 24px;\n      color: #fff;\n      font-size: 15px;\n      font-weight: 700;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      display: inline-flex;\n      align-items: center;\n      transition: background 0.3s ease, transform 0.2s ease;\n    }\n    #markDoneBtn:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #markDoneBtnIcon {\n      width: 18px;\n      height: 18px;\n      margin-right: 8px;\n      transition: fill 0.3s ease;\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>AI observations (strong points for usage)</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>AI observations (strong points for usage)</h1>\n    <!-- Exam Form -->\n    <form id=\"examForm\">\n      <!-- User Data (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Details</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g. John Smith\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"Lead Generator\" disabled>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasiia Fadieieva\">Anastasiia Fadieieva</option>\n            <option value=\"Elena Yermakova\">Elena Yermakova</option>\n            <option value=\"Hanna Aleksandrova\">Hanna Aleksandrova</option>\n            <option value=\"Sabina Hasanova\">Sabina Hasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Q1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. Which of the following best describes Chat GPT?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"chatgpt\" data-correct=\"true\"> An advanced conversational AI model developed by OpenAI</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"predictive\"> A predictive analytics tool for CRM integration</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"visual\"> A visual brainstorming tool</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"search\"> A search engine that provides detailed explanations</label>\n      </div>\n\n      <!-- Q2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. Which key function does Chat GPT perform for lead generators?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"visualMapping\"> Creating interactive visual mind maps</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"leadScoring\"> Predicting lead scores</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"textGeneration\" data-correct=\"true\"> Generating human-like text for outreach messages</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"marketResearch\"> Conducting market research through data visualization</label>\n      </div>\n\n      <!-- Q3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. Select all that apply: What are some pros of using Chat GPT?</h3>\n        <label><input type=\"checkbox\" name=\"q3\" value=\"continuousLearning\" data-correct=\"true\"> Continuous learning and improvement</label>\n        <label><input type=\"checkbox\" name=\"q3\" value=\"internetDependency\"> Requires internet connectivity (con)</label>\n        <label><input type=\"checkbox\" name=\"q3\" value=\"inaccurateOutput\"> Can sometimes produce incorrect or biased information (con)</label>\n        <label><input type=\"checkbox\" name=\"q3\" value=\"highQuality\" data-correct=\"true\"> High-quality, context-aware responses</label>\n      </div>\n\n      <!-- Q4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. Which of the following best describes Gemini 2.0?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"notebook\"> A collaborative notebook-based tool for data analysis</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"napkin\"> A visual brainstorming and idea generation tool</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"gemini\" data-correct=\"true\"> An AI platform focused on data-driven decision-making, offering predictive analytics and personalized marketing strategies</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"perplexity\"> An AI-powered search engine with detailed explanations</label>\n      </div>\n\n      <!-- Q5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. Select all that apply: What are some cons of using Gemini 2.0?</h3>\n        <label><input type=\"checkbox\" name=\"q5\" value=\"setupTime\" data-correct=\"true\"> May require significant setup time</label>\n        <label><input type=\"checkbox\" name=\"q5\" value=\"highCost\" data-correct=\"true\"> Subscription costs can be high</label>\n        <label><input type=\"checkbox\" name=\"q5\" value=\"limitedPower\"> Limited computational power (applies to other tools)</label>\n        <label><input type=\"checkbox\" name=\"q5\" value=\"incorrectInfo\"> Produces incorrect or biased information (applies to Chat GPT)</label>\n      </div>\n\n      <!-- Q6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. Which of the following best describes the functionality of NotebookLM?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"interactiveNotebook\" data-correct=\"true\"> It allows users to create, share, and analyze data within an interactive notebook environment</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"predictiveAnalytics\"> Provides predictive analytics and lead scoring</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"chatbot\"> Generates human-like text for outreach</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"customerSupport\"> Automates customer engagement</label>\n      </div>\n\n      <!-- Q7 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. Select all that apply: What are the advantages of using NotebookLM?</h3>\n        <label><input type=\"checkbox\" name=\"q7\" value=\"realTimeCollab\" data-correct=\"true\"> Real-time collaboration features</label>\n        <label><input type=\"checkbox\" name=\"q7\" value=\"multipleFormats\" data-correct=\"true\"> Supports multiple data formats and sources</label>\n        <label><input type=\"checkbox\" name=\"q7\" value=\"easyToUse\" data-correct=\"true\"> Easy to use for both beginners and experts</label>\n        <label><input type=\"checkbox\" name=\"q7\" value=\"limitedPower\"> Limited computational power for large datasets (con)</label>\n      </div>\n\n      <!-- Q8 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. What is Perplexity best described as?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"brainstorming\"> A visual brainstorming tool</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"notebook\"> A collaborative notebook for data analysis</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"perplexity\" data-correct=\"true\"> An AI-powered search engine that provides answers with explanations</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"predictive\"> A tool for predictive analytics and lead scoring</label>\n      </div>\n\n      <!-- Q9 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. Select all that apply: Which functions are associated with Perplexity?</h3>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"sourceVerification\" data-correct=\"true\"> Source verification</label>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"factChecking\" data-correct=\"true\"> Fact-checking</label>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"infoGathering\" data-correct=\"true\"> Real-time information gathering</label>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"visualDiagrams\"> Generating interactive visual diagrams</label>\n      </div>\n\n      <!-- Q10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. Which of the following best describes the functionality of Qwen Chat?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"dataViz\"> A tool for data visualization and market analysis</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"chatbot\" data-correct=\"true\"> An intelligent chatbot solution for customer engagement and support</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"brainstorming\"> A visual brainstorming tool for idea generation</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"predictiveAnalytics\"> A predictive analytics platform</label>\n      </div>\n\n      <!-- Q11 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. What is Napkin primarily used for?</h3>\n        <label><input type=\"radio\" name=\"q11\" value=\"visualBrainstorm\" data-correct=\"true\"> Visual brainstorming and idea generation using diagrams and mind maps</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"customerSupport\"> Automating customer support responses</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"competitiveAnalysis\"> Conducting competitive analysis</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"leadScoring\"> Data-driven lead scoring</label>\n      </div>\n\n      <!-- Q12 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Select all that apply: Which of the following are advanced applications of Claude.ai?</h3>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"multiDocument\" data-correct=\"true\"> Multi-document analysis</label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"customWorkflow\" data-correct=\"true\"> Custom workflow creation</label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"basicTemplates\"> Basic email template creation</label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"industryResearch\" data-correct=\"true\"> Detailed industry research</label>\n      </div>\n\n      <!-- Q13 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. According to the guide, which of the following are best practices for AI integration?</h3>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"systemPrompts\" data-correct=\"true\"> Use system prompts for consistent outputs</label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"breakTasks\" data-correct=\"true\"> Break complex requests into smaller tasks</label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"manualEntry\"> Rely solely on manual data entry</label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"noTemplates\"> Avoid saving successful prompts</label>\n      </div>\n\n      <!-- Q14 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Which practices are recommended for content structure when using AI tools?</h3>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"includeContext\" data-correct=\"true\"> Include relevant context</label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"bulletPoints\" data-correct=\"true\"> Use bullet points for clarity</label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"longParagraphs\"> Write long, unstructured paragraphs</label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"breakDown\" data-correct=\"true\"> Break down complex requests</label>\n      </div>\n\n      <!-- Q15 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Which of the following is an advanced feature offered by some AI tools as mentioned in the guide?</h3>\n        <label><input type=\"radio\" name=\"q15\" value=\"customWorkflow\" data-correct=\"true\"> Custom workflow creation</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"emailPayroll\"> Email payroll management</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"processAutomation\" data-correct=\"true\"> Process automation</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"socialScheduling\"> Social media scheduling</label>\n      </div>\n\n      <button type=\"button\" id=\"submitButton\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 minutes in seconds\n    const examName = \"AI observations (strong points for usage)\";\n\n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      startTimer();\n    }\n\n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(remainingSeconds).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n\n    // Formats date as \"dd.mm.yyyy hh:mm\", e.g., \"12.02.2025 12:18\"\n    function formatDate(date) {\n      const options = {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: false\n      };\n      const formatted = date.toLocaleString(\"en-GB\", options); // e.g., \"12/02/2025, 12:18\"\n      return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n    }\n\n    function calculateScore(timeout = false) {\n      clearInterval(timer);\n      const submitBtn = document.getElementById('submitButton');\n      if (submitBtn) {\n        submitBtn.style.display = 'none';\n      }\n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        if (points === 0) return; // Skip user data block\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(input => {\n          if (input.checked) selectedValues.push(input.value);\n          if (input.dataset.correct === \"true\") {\n            correctValues.push(input.value);\n          }\n        });\n        if (\n          selectedValues.length !== correctValues.length ||\n          !selectedValues.every(val => correctValues.includes(val))\n        ) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(input => {\n            if (input.dataset.correct === \"true\") {\n              input.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsedSec = seconds;\n      const timeUsed = `${Math.floor(timeUsedSec / 60)}m ${timeUsedSec % 60}s`;\n      document.getElementById('result').innerHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsed}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      document.getElementById('result').innerHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='https://hook.eu1.make.com/jcjl176nvrhlm4ag7qiixjzssxqdbl5n'\">Read Again</button>\n        <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n      `;\n\n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n      // Include the current date in the POST data\n      const postData = {\n        fullName,\n        profession,\n        recruiter,\n        day: \"2\", // Day remains 1\n        examName,\n        scoreObtained: totalPoints,\n        scoreTotal: maxPoints,\n        timeUsed: timeUsedSec,\n        timeTotal: timeLimit,\n        date: formatDate(new Date())\n      };\n\n      fetch(\"https://hook.eu1.make.com/2yp4rtezjxi2o6fi2jouedn3i7sgxss1\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(postData)\n      })\n      .then(response => response.text())\n      .then(data => console.log(\"POST response:\", data))\n      .catch(err => console.error(\"Error in POST:\", err));\n\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n\n    // loadTask: Fetches task markdown, displays an optional task link field,\n    // and provides a \"Mark as done\" button with a toggling check icon.\n    function loadTask() {\n      fetch(\"https://hook.eu1.make.com/up226l5sykpbe4yd3qvo3ne3l7o6lggl\", { method: \"GET\" })\n        .then(response => response.text())\n        .then(markdownText => {\n          const parsedMarkdown = parseMarkdown(markdownText);\n          document.body.innerHTML = `\n            <div style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding: 2rem; max-width: 800px; margin: 0 auto;\">\n              ${parsedMarkdown}\n              <div style=\"margin-top: 2rem;\">\n                <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional task link:</label>\n                <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://docs.google.com/spreadsheets/...\" style=\"width: 100%; padding: 8px; margin-top: 4px;\">\n              </div>\n              <div style=\"margin-top: 16px;\">\n                <button id=\"markDoneBtn\" style=\"\n                  background: var(--green); \n                  color: #fff; \n                  border: none; \n                  padding: 12px 24px; \n                  border-radius: 6px; \n                  font-size: 15px; \n                  font-weight: 700; \n                  cursor: pointer; \n                  display: inline-flex; \n                  align-items: center; \n                  transition: background 0.3s ease, transform 0.2s ease;\n                \">\n                  <svg id=\"markDoneBtnIcon\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"\n                       viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"\n                       style=\"width: 18px; height: 18px; margin-right: 8px;\">\n                    <!-- Initially an empty box (unchecked) -->\n                    <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>\n                  </svg>\n                  Mark as done\n                </button>\n              </div>\n            </div>\n          `;\n\n          const markDoneBtn = document.getElementById(\"markDoneBtn\");\n          const markDoneBtnIcon = document.getElementById(\"markDoneBtnIcon\");\n          let isDone = false;\n\n          markDoneBtn.addEventListener(\"click\", function() {\n            isDone = !isDone;\n            const taskLink = document.getElementById(\"taskLinkInput\").value.trim();\n            if (isDone) {\n              // Toggle icon to a check mark inside a box\n              markDoneBtnIcon.innerHTML = `\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 11l3 3L22 4\" />\n                <path d=\"M4 4h16v16H4z\" />\n              `;\n              // Send POST request with link and current date\n              const postData = {\n                link: taskLink,\n                date: formatDate(new Date())\n              };\n              fetch(\"https://hook.eu1.make.com/dy57247xgkw7criy6ind4j78ej3yqrx7\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(postData)\n              })\n              .then(response => response.text())\n              .then(data => {\n                console.log(\"Task completed webhook sent:\", data);\n              })\n              .catch(err => console.error(\"Error sending task completed webhook:\", err));\n            } else {\n              // Toggle icon back to an empty box\n              markDoneBtnIcon.innerHTML = `<rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>`;\n            }\n          });\n        })\n        .catch(err => {\n          console.error(\"Error loading task markdown:\", err);\n          document.body.innerHTML = `<p>Error loading task.</p>`;\n        });\n    }\n\n    // Simple Markdown parser: converts headings (#, ##, ###, ####) into nested <details> elements\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line;\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -180,
        -80
      ],
      "id": "207032c5-ce65-4ec6-b45e-8e819ed9ebb3",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "348701d0-c56f-4d53-bd22-4f1e9056b1fa",
  "triggerCount": 0,
  "tags": []
}