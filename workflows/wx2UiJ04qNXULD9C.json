{
  "createdAt": "2025-06-11T08:57:01.521Z",
  "updatedAt": "2025-06-11T08:57:05.923Z",
  "id": "wx2UiJ04qNXULD9C",
  "name": "AppTest-Send_connection_requests_in_LinkedIn",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/leadgeneration/tests/SendConnectionRequestsInLinkedIn",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -260,
        -140
      ],
      "id": "70b432a3-945e-4e32-98d5-0dc9dcf3ffb5",
      "name": "Webhook",
      "webhookId": "835f2593-1153-4622-ae80-ae68d2d34527"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n   <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>Send connection requests in LinkedIn</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    /* Single-answer (radio) styled as circles */\n    input[type=\"radio\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n    }\n    /* Multi-answer (checkbox) */\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    /* Make the \"Profession\" field read-only */\n    input[disabled] {\n      background: #f3f3f3;\n      color: #888;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>Send connection requests in LinkedIn</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button id=\"startExamBtn\" onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>Send connection requests in LinkedIn</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"LinkedIn Specialist\" disabled>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Q1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. Which action on a LinkedIn profile page starts a connection request?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"connect\" data-correct=\"true\"> Click the \"Connect\" button</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"message\"> Click the \"Message\" button</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"follow\"> Click the \"Follow\" button</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"endorse\"> Click the \"Endorse\" button</label>\n      </div>\n\n      <!-- Q2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. If the \"Connect\" button is not visible on a profile, what should you do?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"refresh\"> Refresh the page</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"moreDropdown\" data-correct=\"true\"> Check the \"More\" dropdown menu</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"scroll\"> Scroll down</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"contactSupport\"> Contact support</label>\n      </div>\n\n      <!-- Q3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. Which connection method may not allow for personalized invites?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"peopleYouMayKnow\" data-correct=\"true\"> Sending requests from \"People You May Know\"</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"companyPages\"> Sending requests from Company Pages</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"groupLists\"> Sending requests from Group Member Lists</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"eventsPages\"> Sending requests from Events Pages</label>\n      </div>\n\n      <!-- Q4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. What type of profile photo is recommended for higher acceptance rates?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"selfie\"> A casual selfie</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"professional\" data-correct=\"true\"> A clear, highâ€‘quality headshot</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"groupPhoto\"> A group photo</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"companyLogo\"> A company logo</label>\n      </div>\n\n      <!-- Q5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. What should your LinkedIn headline showcase?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"hobbies\"> Your hobbies and interests</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"valueProp\" data-correct=\"true\"> Your value proposition and expertise</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"jobTitle\"> Just your job title</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"quote\"> An inspirational quote</label>\n      </div>\n\n      <!-- Q6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. Which preâ€‘connection engagement strategy builds credibility?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"ignorePosts\"> Ignore their posts</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"likeComment\" data-correct=\"true\"> Like and comment on their posts</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"immediateRequest\"> Send a connection request immediately</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"massInvite\"> Use mass invites</label>\n      </div>\n\n      <!-- Q7 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. Select all reasons for cleaning up old connection requests.</h3>\n        <label><input type=\"checkbox\" name=\"q7\" value=\"preventFlagging\" data-correct=\"true\"> Prevents account flagging</label>\n        <label><input type=\"checkbox\" name=\"q7\" value=\"betterAcceptance\" data-correct=\"true\"> Ensures a better connection acceptance rate</label>\n        <label><input type=\"checkbox\" name=\"q7\" value=\"saveTime\"> Saves time reviewing requests</label>\n        <label><input type=\"checkbox\" name=\"q7\" value=\"increasePending\"> Increases the number of pending requests</label>\n      </div>\n\n      <!-- Q8 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. Which of the following are best practices for account safety on LinkedIn?</h3>\n        <label><input type=\"checkbox\" name=\"q8\" value=\"professionalComm\" data-correct=\"true\"> Maintain professional communication</label>\n        <label><input type=\"checkbox\" name=\"q8\" value=\"limitRequests\" data-correct=\"true\"> Avoid sending too many requests at once</label>\n        <label><input type=\"checkbox\" name=\"q8\" value=\"salesNavigator\" data-correct=\"true\"> Use LinkedIn Sales Navigator properly</label>\n        <label><input type=\"checkbox\" name=\"q8\" value=\"massInvites\"> Send mass, impersonal invites</label>\n      </div>\n\n      <!-- Q9 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. Select all recommended preâ€‘connection engagement strategies.</h3>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"likeComment\" data-correct=\"true\"> Like and comment on their posts</label>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"joinGroups\" data-correct=\"true\"> Join shared LinkedIn groups</label>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"followContent\" data-correct=\"true\"> Follow their content</label>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"genericRequest\"> Send a generic connection request</label>\n      </div>\n\n      <!-- Q10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. After a connection request is accepted, what is the recommended next step?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"thankYou\" data-correct=\"true\"> Send a personalized thankâ€‘you message</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"pitchProduct\"> Immediately pitch a product</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"doNothing\"> Do nothing</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"massMessage\"> Send a mass message</label>\n      </div>\n\n      <!-- Q11 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. Which scenario is addressed by the cold outreach message template?</h3>\n        <label><input type=\"radio\" name=\"q11\" value=\"potentialClient\" data-correct=\"true\"> Reaching out to a potential client</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"friendRequest\"> Requesting a friendship</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"jobApplication\"> Applying for a job</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"internalMemo\"> Sending an internal memo</label>\n      </div>\n\n      <!-- Q12 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Which message template is used after both parties attended the same event?</h3>\n        <label><input type=\"radio\" name=\"q12\" value=\"coldOutreach\"> Cold outreach to a potential client</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"eventFollowUp\" data-correct=\"true\"> Engaging after an event or webinar</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"groupConnect\"> Connecting through a mutual LinkedIn group</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"thankYouMessage\"> Postâ€‘connection thankâ€‘you</label>\n      </div>\n\n      <!-- Q13 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. Which message template includes a soft introduction and thankâ€‘you after connecting?</h3>\n        <label><input type=\"radio\" name=\"q13\" value=\"coldOutreach\"> Cold outreach</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"eventFollowUp\"> Engaging after an event</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"groupConnect\"> Connecting through a mutual group</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"thankYouSoft\" data-correct=\"true\"> Postâ€‘connection thankâ€‘you &amp; soft introduction</label>\n      </div>\n\n      <!-- Q14 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Select all practices you should avoid according to the final takeaways.</h3>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"massInvites\" data-correct=\"true\"> Sending mass, impersonal invites</label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"ignoreEngagement\" data-correct=\"true\"> Neglecting to engage with prospects' content</label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"optimizeProfile\"> Optimizing your profile before reaching out</label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"personalizeRequest\"> Personalizing every connection request</label>\n      </div>\n\n      <!-- Q15 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Select all reasons why following these networking strategies is important.</h3>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"buildConnections\" data-correct=\"true\"> To build genuine, valuable connections</label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"preventRestrictions\" data-correct=\"true\"> To prevent account restrictions due to excessive pending requests</label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"improveEngagement\" data-correct=\"true\"> To improve engagement success</label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"massInvites\"> To increase the number of impersonal invites</label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"extraBreaks\"> To increase personal break time</label>\n      </div>\n\n      <button id=\"submitExamBtn\" type=\"button\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    // Fisherâ€“Yates shuffle function\n    function shuffle(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n    // Randomize answer labels (excluding user data block)\n    function randomizeAnswers() {\n      const questions = document.querySelectorAll('.question[data-points]:not([data-points=\"0\"])');\n      questions.forEach(question => {\n        const labels = Array.from(question.querySelectorAll('label'));\n        const shuffled = shuffle(labels);\n        shuffled.forEach(lbl => lbl.parentNode.removeChild(lbl));\n        const heading = question.querySelector('h3');\n        shuffled.forEach(lbl => heading.parentNode.appendChild(lbl));\n      });\n    }\n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 minutes\n    const examName = \"Send connection requests in Linkedin\";\n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      randomizeAnswers();\n      startTimer();\n    }\n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const remain = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(remain).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n    function calculateScore(timeout = false) {\n      // Hide the submit button immediately\n      const submitBtn = document.getElementById('submitExamBtn');\n      if (submitBtn) {\n        submitBtn.style.display = 'none';\n      }\n      clearInterval(timer);\n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        // Skip user data block\n        if (points === 0) return;\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(inp => {\n          if (inp.checked) selectedValues.push(inp.value);\n          if (inp.dataset.correct === \"true\") correctValues.push(inp.value);\n        });\n        if (\n          selectedValues.length !== correctValues.length ||\n          !selectedValues.every(val => correctValues.includes(val))\n        ) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(inp => {\n            if (inp.dataset.correct === \"true\") {\n              inp.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsedSec = seconds;\n      const timeUsedStr = `${Math.floor(timeUsedSec / 60)}m ${timeUsedSec % 60}s`;\n      let resultsHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsedStr}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      // Append \"Retry\", \"Read Again\", and \"Task\" buttons\n      resultsHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='https://hook.eu1.make.com/jcjl176nvrhlm4ag7qiixjzssxqdbl5n'\">Read Again</button>\n        <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n      `;\n      document.getElementById('result').innerHTML = resultsHTML;\n      \n      // Gather user data and post exam results (optional)\n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n      const postData = {\n        fullName,\n        profession,\n        recruiter,\n        day: \"3\",\n        examName,\n        scoreObtained: totalPoints,\n        scoreTotal: maxPoints,\n        timeUsed: timeUsedSec,\n        timeTotal: timeLimit\n      };\n      fetch(\"https://hook.eu1.make.com/2yp4rtezjxi2o6fi2jouedn3i7sgxss1\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(postData)\n      })\n      .then(response => response.text())\n      .then(data => console.log(\"POST response:\", data))\n      .catch(err => console.error(\"Error in POST:\", err));\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n    // loadTask() replaces the exam view with the task instructions and adds the optional link input and task completed checkbox.\n    function loadTask() {\n      const taskMarkdown = `# LinkedIn Connection Requests Task\n\nThis task assesses your ability to send effective LinkedIn connection requests using best practices, personalization, and profile optimization. You will complete three practical exercises that simulate real-world lead generation scenarios.\n\n# ðŸ”¹ Task: Send Personalized LinkedIn Connection Requests Using Best Practices\n\n## âœ… Steps to Complete\n\n1. **Profile Preparation & Optimization:**\n   - Review your LinkedIn profile and ensure it follows best practices:\n     - Professional profile photo\n     - Compelling headline\n     - Complete work experience & skills\n     - At least two recent engagements (likes/comments on posts)\n   - **Action:** Take a screenshot of your LinkedIn profile to confirm it meets these criteria.\n\n2. **Identify Three Target Leads & Personalize Your Connection Requests:**\n   - **Scenarios (find your own leads using search prompts):**\n     - **Scenario 1:** A Tech Startup CEO *(e.g., Sarah Collins, CEO of TechBoost)*\n     - **Scenario 2:** A Marketing Director in E-commerce *(e.g., Lisa Carter, Director at ShopEase)*\n     - **Scenario 3:** A HR Manager in an Advertising Company *(e.g., Michael Reynolds, Head of Talent at CreativeAds)*\n   - **Action:**\n     - Use an AI tool to generate initial connection requests.\n     - Refine each message manually to enhance personalization, clarity, and engagement.\n\n3. **Submit:**\n   - Provide both the AI-generated and the refined versions of your connection requests for each scenario.\n\n# ðŸ“Œ Submission Instructions\n\n- **Document Format:** Google Docs.\n- **Structure the Document as Follows:**\n  1. **LinkedIn Profile Screenshot** (Optimized Profile)\n  2. **Scenario 1:** (AI-generated + refined message)\n  3. **Scenario 2:** (AI-generated + refined message)\n  4. **Scenario 3:** (AI-generated + refined message)\n\n# ðŸ’¡ Bonus Challenge\n\n- **Engagement Strategy:** Explain how engaging with a leadâ€™s content before sending a connection request could increase acceptance rates.\n\nBy completing this task, you demonstrate your ability to craft engaging LinkedIn connection requests that drive acceptance and foster meaningful conversations!`;\n      const parsedMarkdown = parseMarkdown(taskMarkdown);\n      document.body.innerHTML = `\n        <div style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding: 2rem;\">\n          ${parsedMarkdown}\n          <div style=\"margin-top: 2rem;\">\n            <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional link:</label>\n            <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://docs.google.com/...\" style=\"width: 100%; padding: 8px; margin: 4px 0 1rem;\">\n            <input type=\"checkbox\" id=\"taskCompletedCheckbox\">\n            <label for=\"taskCompletedCheckbox\">Task Completed</label>\n          </div>\n        </div>\n      `;\n      \n      const checkbox = document.getElementById(\"taskCompletedCheckbox\");\n      checkbox.addEventListener(\"change\", function() {\n        if (checkbox.checked) {\n          const taskLink = document.getElementById(\"taskLinkInput\").value.trim() || \"\";\n          fetch(\"https://hook.eu1.make.com/dy57247xgkw7criy6ind4j78ej3yqrx7\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ link: taskLink })\n          })\n          .then(response => response.text())\n          .then(data => {\n            console.log(\"Task completed webhook sent:\", data);\n            checkbox.disabled = true;\n          })\n          .catch(err => console.error(\"Error sending task completed webhook:\", err));\n        }\n      });\n    }\n    // Markdown parser: converts markdown headings into collapsible <details> elements (collapsed by default)\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line + \"<br>\";\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -40,
        -140
      ],
      "id": "06e5f138-97fb-4087-a918-e9b0fd669cf3",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "ce8616b1-04ad-4591-908d-3f1181e0682e",
  "triggerCount": 0,
  "tags": []
}