{
  "createdAt": "2025-06-11T08:48:23.968Z",
  "updatedAt": "2025-06-11T08:48:27.347Z",
  "id": "oVhGC8jXejrYPvdu",
  "name": "AppTest-Create_Google_Sheet_template_for_lead_generation",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/leadgeneration/tests/CreateGoogleSheetTemplateForLeadGeneration",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -280,
        -60
      ],
      "id": "b33d3ae7-ce1f-42c9-83c3-acfec5150f0e",
      "name": "Webhook",
      "webhookId": "d2d42a07-4a5a-47e0-8639-ecf7436d11f6"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>Create Google Sheet template for lead generation</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    input[type=\"radio\"],\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n    }\n    input[type=\"text\"],\n    input[type=\"number\"],\n    select {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    input[disabled] {\n      background: #f3f3f3;\n      color: #888;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>Create Google Sheet template for lead generation</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>Google Sheets Lead Generation Template Exam</h1>\n\n    <form id=\"examForm\">\n      <!-- Personal Data (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Details</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g. John Smith\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"Lead Generator\" disabled>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasiia Fadieieva\">Anastasiia Fadieieva</option>\n            <option value=\"Elena Yermakova\">Elena Yermakova</option>\n            <option value=\"Hanna Aleksandrova\">Hanna Aleksandrova</option>\n            <option value=\"Sabina Hasanova\">Sabina Hasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Q1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. What is one primary benefit of using Google Sheets for lead generation?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"design\"> Create social media posts</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"branding\"> Design marketing logos</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"efficient\" data-correct=\"true\"> Organize, track, and analyze leads efficiently</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"payroll\"> Manage payroll</label>\n      </div>\n\n      <!-- Q2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. Which of the following columns are part of the recommended header row in a basic lead generation template?</h3>\n        <label><input type=\"checkbox\" name=\"q2\" value=\"companyName\" data-correct=\"true\"> Company Name</label>\n        <label><input type=\"checkbox\" name=\"q2\" value=\"companyLinkedIn\" data-correct=\"true\"> Company LinkedIn URL</label>\n        <label><input type=\"checkbox\" name=\"q2\" value=\"website\" data-correct=\"true\"> Website</label>\n        <label><input type=\"checkbox\" name=\"q2\" value=\"employeeSalary\"> Employee Salary</label>\n        <label><input type=\"checkbox\" name=\"q2\" value=\"status\" data-correct=\"true\"> Status</label>\n        <label><input type=\"checkbox\" name=\"q2\" value=\"leadPosition\" data-correct=\"true\"> Lead Position</label>\n      </div>\n\n      <!-- Q3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. How do you create a new Google Sheets document using a corporate Gmail account?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"driveNew\" data-correct=\"true\"> Go to Google Drive, click \"New\" &gt; \"Google Sheets\"</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"docsNew\"> Go to Google Docs and click \"New\"</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"gmailSheets\"> Open Gmail and click the Sheets icon</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"none\"> None of the above</label>\n      </div>\n\n      <!-- Q4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. What is the proper method to freeze the header row in Google Sheets?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"freezeFirstRow\"> Select the first row and choose Format &gt; Freeze</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"freezeRow2\" data-correct=\"true\"> Select row 2 and choose View &gt; Freeze &gt; 1 row</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"rightClickFreeze\"> Right-click the header row and select Freeze</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"ctrlF\"> Use the keyboard shortcut Ctrl+F</label>\n      </div>\n\n      <!-- Q5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. Which function helps you count leads by a specific status in Google Sheets?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"countif\" data-correct=\"true\"> COUNTIF</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"sum\"> SUM</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"counta\"> COUNTA</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"average\"> AVERAGE</label>\n      </div>\n\n      <!-- Q6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. What does the COUNTA formula do in a lead generation template?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"sumNumbers\"> Calculates the sum of numbers</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"filterConnected\"> Filters connected leads</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"countNonEmpty\" data-correct=\"true\"> Counts total leads (non-empty cells)</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"sortData\"> Sorts the data</label>\n      </div>\n\n      <!-- Q7 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. Which of the following is NOT recommended when formatting your Google Sheet for lead generation?</h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"multipleFonts\" data-correct=\"true\"> Using multiple font variations</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"consistentFonts\"> Using 1–2 font variations for clarity</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"addingBorders\"> Adding borders for separation</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"cellColors\"> Changing cell colors for emphasis</label>\n      </div>\n\n      <!-- Q8 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. Which feature allows you to automatically sort data in Google Sheets?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"sortFormula\" data-correct=\"true\"> SORT formula</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"filterFormula\"> FILTER formula</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"arrayFormula\"> ARRAYFORMULA</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"conditionalFormatting\"> Conditional Formatting</label>\n      </div>\n\n      <!-- Q9 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. How can you ensure consistent data entry using Data Validation in Google Sheets?</h3>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"listItems\" data-correct=\"true\"> Set up a list of items for dropdown menus</label>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"validDate\" data-correct=\"true\"> Use \"Is valid date\" for date columns</label>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"manualEntry\"> Rely solely on manual data entry</label>\n        <label><input type=\"checkbox\" name=\"q9\" value=\"ignoreValidation\"> Ignore input rules</label>\n      </div>\n\n      <!-- Q10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. Which function automatically applies a formula to an entire column?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"sum\"> SUM</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"countif\"> COUNTIF</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"sort\"> SORT</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"arrayFormula\" data-correct=\"true\"> ARRAYFORMULA</label>\n      </div>\n\n      <!-- Q11 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. What is the purpose of applying conditional formatting rules in a lead generation template?</h3>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"highlightOverdue\" data-correct=\"true\"> Highlight overdue contacts</label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"visualTracking\" data-correct=\"true\"> Improve visual tracking of lead statuses</label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"deleteDuplicates\"> Automatically delete duplicate leads</label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"colorPriority\" data-correct=\"true\"> Emphasize priority levels</label>\n      </div>\n\n      <!-- Q12 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Which sheet is recommended as the main repository for lead data in the template?</h3>\n        <label><input type=\"radio\" name=\"q12\" value=\"leadDatabase\" data-correct=\"true\"> Lead Database</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"dailyActivity\"> Daily Activity Tracker</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"campaignPerformance\"> Campaign Performance</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"templatesLibrary\"> Message Templates Library</label>\n      </div>\n\n      <!-- Q13 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. Which advanced technique is suggested for monitoring follow-up efficiency?</h3>\n        <label><input type=\"radio\" name=\"q13\" value=\"countifsFollowup\" data-correct=\"true\"> Using COUNTIFS to track 'Follow-Up' status with recent dates</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"sumTotal\"> Using SUM to add all leads</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"countaAll\"> Using COUNTA on all cells</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"sortByDate\"> Sorting the data by date</label>\n      </div>\n\n      <!-- Q14 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Which of the following is a benefit of using multiple sheets and named ranges in your lead generation template?</h3>\n        <label><input type=\"radio\" name=\"q14\" value=\"more complex setup\"> More complex setup</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"slower performance\"> Slower performance</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"improved organization\" data-correct=\"true\"> Improved organization</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"increased redundancy\"> Increased redundancy</label>\n      </div>\n\n      <!-- Q15 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Which tool can be linked to Google Sheets to create a data entry form?</h3>\n        <label><input type=\"radio\" name=\"q15\" value=\"googleForms\" data-correct=\"true\"> Google Forms</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"googleDocs\"> Google Docs</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"googleSlides\"> Google Slides</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"googleCalendar\"> Google Calendar</label>\n      </div>\n\n      <button type=\"button\" id=\"submitButton\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    // Fisher–Yates shuffle for arrays\n    function shuffle(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n    \n    // Randomize the order of labels for each question (excluding the user data block)\n    function randomizeAnswers() {\n      const questions = document.querySelectorAll('.question[data-points]:not([data-points=\"0\"])');\n      questions.forEach(question => {\n        const labels = Array.from(question.querySelectorAll('label'));\n        const shuffled = shuffle(labels);\n        shuffled.forEach(label => label.parentNode.removeChild(label));\n        const heading = question.querySelector('h3');\n        shuffled.forEach(label => heading.parentNode.appendChild(label));\n      });\n    }\n    \n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 minutes (300 seconds)\n    const examName = \"Create Google Sheet template for lead generation\";\n    \n    // Date formatter: formats a Date object as \"dd.mm.yyyy hh:mm\"\n    function formatDate(date) {\n      const options = { \n        day: \"2-digit\", \n        month: \"2-digit\", \n        year: \"numeric\", \n        hour: \"2-digit\", \n        minute: \"2-digit\", \n        hour12: false \n      };\n      const formatted = date.toLocaleString(\"en-GB\", options);\n      return formatted.replace(/\\//g, \".\").replace(\",\", \"\");\n    }\n    \n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      randomizeAnswers();\n      startTimer();\n    }\n    \n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(remainingSeconds).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n    \n    function calculateScore(timeout = false) {\n      // Hide the Submit button on click\n      document.getElementById('submitButton').style.display = 'none';\n      clearInterval(timer);\n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        if (points === 0) return; // Skip user data block\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(inp => {\n          if (inp.checked) selectedValues.push(inp.value);\n          if (inp.dataset.correct === \"true\") correctValues.push(inp.value);\n        });\n        if (selectedValues.length !== correctValues.length ||\n            !selectedValues.every(val => correctValues.includes(val))) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(inp => {\n            if (inp.dataset.correct === \"true\") {\n              inp.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsedSec = seconds;\n      const timeUsed = `${Math.floor(timeUsedSec / 60)}m ${timeUsedSec % 60}s`;\n      let resultHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsed}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      // Append Retry, Read Again, and Task buttons\n      resultHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='https://hook.eu1.make.com/jcjl176nvrhlm4ag7qiixjzssxqdbl5n'\">Read Again</button>\n        <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n      `;\n      document.getElementById('result').innerHTML = resultHTML;\n      \n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n      const postData = {\n        \"fullName\": fullName,\n        \"profession\": profession,\n        \"recruiter\": recruiter,\n        \"day\": \"1\",\n        \"examName\": examName,\n        \"scoreObtained\": totalPoints,\n        \"scoreTotal\": maxPoints,\n        \"timeUsed\": timeUsedSec,\n        \"timeTotal\": timeLimit,\n        \"date\": formatDate(new Date())\n      };\n      fetch(\"https://hook.eu1.make.com/2yp4rtezjxi2o6fi2jouedn3i7sgxss1\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(postData)\n      })\n      .then(response => response.text())\n      .then(data => console.log(\"POST response:\", data))\n      .catch(err => console.error(\"Error in POST:\", err));\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n    \n    // loadTask() replaces the exam view with task instructions.\n    // This function fetches task markdown from a webhook, parses it, and displays it along with a link input field and a task completion checkbox.\n    function loadTask() {\n      fetch(\"https://hook.eu1.make.com/q8o4228unofetrgidb74abxcjuvlrk94\", { method: \"GET\" })\n        .then(response => response.text())\n        .then(markdownText => {\n          const parsedMarkdown = parseMarkdown(markdownText);\n          document.body.innerHTML = `\n            <div style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding:2rem;\">\n              ${parsedMarkdown}\n              <div style=\"margin-top: 2rem;\">\n                <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Paste your task result here:</label>\n                <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://docs.google.com/spreadsheets/...\" style=\"width: 100%; padding: 8px; margin-top: 4px;\">\n                <button type=\"button\" id=\"submitTaskLinkButton\" style=\"margin-top: 8px;\">Submit Task Link</button>\n              </div>\n              <div style=\"margin-top: 1rem;\">\n                <input type=\"checkbox\" id=\"taskCompletedCheckbox\">\n                <label for=\"taskCompletedCheckbox\" style=\"font-weight: bold; color: #2E7D32;\">I have completed the task and uploaded my file. Click here to mark as complete.</label>\n              </div>\n            </div>\n          `;\n          // Event listener for submitting the task link\n          const submitTaskLinkButton = document.getElementById(\"submitTaskLinkButton\");\n          submitTaskLinkButton.addEventListener(\"click\", function() {\n            const taskLink = document.getElementById(\"taskLinkInput\").value.trim();\n            if (!taskLink) {\n              alert(\"Please paste your task result here before submitting.\");\n              return;\n            }\n            fetch(\"https://hook.eu1.make.com/your-task-link-endpoint\", {  // Change this URL as needed.\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ taskLink: taskLink })\n            })\n            .then(response => response.text())\n            .then(data => {\n              alert(\"Task link submitted successfully!\");\n              console.log(\"Task link POST response:\", data);\n            })\n            .catch(err => console.error(\"Error submitting task link:\", err));\n          });\n          // Event listener for the Task Completed checkbox\n          const checkbox = document.getElementById(\"taskCompletedCheckbox\");\n          checkbox.addEventListener(\"change\", function() {\n            if (checkbox.checked) {\n              fetch(\"https://hook.eu1.make.com/dy57247xgkw7criy6ind4j78ej3yqrx7\", { method: \"GET\" })\n                .then(response => response.text())\n                .then(data => {\n                  console.log(\"Task completed webhook sent:\", data);\n                  checkbox.disabled = true;\n                })\n                .catch(err => console.error(\"Error sending task completed webhook:\", err));\n            }\n          });\n        })\n        .catch(err => {\n          console.error(\"Error loading task:\", err);\n          document.body.innerHTML = `<p>Error loading task.</p>`;\n        });\n    }\n    \n    // Simple Markdown parser: converts markdown headings (1 to 4 # symbols) into collapsible <details> elements (collapsed by default)\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line + \"<br>\";\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n  </script>\n</body>\n</html>\n",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -60,
        -60
      ],
      "id": "b23f2cf9-89be-4d35-89e4-027ef7aa3237",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "a4d1061c-1fe8-4b25-9da0-0f547b0f3d29",
  "triggerCount": 0,
  "tags": []
}