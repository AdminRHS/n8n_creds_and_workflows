{
  "createdAt": "2025-06-11T08:50:07.307Z",
  "updatedAt": "2025-06-11T08:50:10.504Z",
  "id": "j1sKdckjGOlYSFJJ",
  "name": "AppTest-Five-Step_Framework",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "Oboarding/PromptEngineering/tests/FiveStepFramework",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -300,
        20
      ],
      "id": "45deba2c-bc41-4edb-954f-d52ff06cb19c",
      "name": "Webhook",
      "webhookId": "0eeeee86-1524-4d3c-9188-9749a8ae84a0"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>Five-step Framework</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8,30,47,0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46,125,50,0.2);\n    }\n    .hidden { display: none; }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8,30,47,0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover { background: rgba(25,118,210,0.04); }\n    /* Radio buttons (single-answer) */\n    input[type=\"radio\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    /* Выпадающий список для профессии */\n    select {\n      width: 100%;\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      background: white;\n      box-sizing: border-box;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46,125,50,0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8,30,47,0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    @media (max-width: 600px) {\n      body { padding: 1rem; }\n      .question { padding: 1rem; }\n      button { width: 100%; padding: 14px 20px; }\n      #timer { top: 10px; right: 10px; font-size: 14px; }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>Five-step Framework</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button id=\"startExamBtn\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>Five-step Framework</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (не оценивается) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <select name=\"profession\">\n            <option value=\"\">Select your profession</option>\n            <option value=\"3d designer\">3D Designer</option>\n            <option value=\"account manager\">Account Manager</option>\n            <option value=\"affiliate manager\">Affiliate Manager</option>\n            <option value=\"analyst\">Analyst</option>\n            <option value=\"animator\">Animator</option>\n            <option value=\"back end developer\">Back End Developer</option>\n            <option value=\"chat operator\">Chat Operator</option>\n            <option value=\"content manager\">Content Manager</option>\n            <option value=\"copywriter\">Copywriter</option>\n            <option value=\"email marketer\">Email Marketer</option>\n            <option value=\"event manager\">Event Manager</option>\n            <option value=\"financial manager\">Financial Manager</option>\n            <option value=\"front end developer\">Front End Developer</option>\n            <option value=\"full stack developer\">Full Stack Developer</option>\n            <option value=\"graphic designer\">Graphic Designer</option>\n            <option value=\"hr manager\">HR Manager</option>\n            <option value=\"illustrator\">Illustrator</option>\n            <option value=\"influencer manager\">Influencer Manager</option>\n            <option value=\"interior designer\">Interior Designer</option>\n            <option value=\"investment manager\">Investment Manager</option>\n            <option value=\"lead generator\">Lead Generator</option>\n            <option value=\"linkbuilder\">Linkbuilder</option>\n            <option value=\"media buyer\">Media Buyer</option>\n            <option value=\"mobile developer\">Mobile Developer</option>\n            <option value=\"mobile video editor\">Mobile Video Editor</option>\n            <option value=\"motion designer\">Motion Designer</option>\n            <option value=\"personal assistant\">Personal Assistant</option>\n            <option value=\"ppc specialist\">PPC Specialist</option>\n            <option value=\"pr manager\">PR Manager</option>\n            <option value=\"project manager\">Project Manager</option>\n            <option value=\"proofreader\">Proofreader</option>\n            <option value=\"qa\">QA</option>\n            <option value=\"recruiter\">Recruiter</option>\n            <option value=\"sales manager\">Sales Manager</option>\n            <option value=\"seo manager\">SEO Manager</option>\n            <option value=\"social media manager\">Social Media Manager</option>\n            <option value=\"system administrator\">System Administrator</option>\n            <option value=\"targetologist\">Targetologist</option>\n            <option value=\"tourism manager\">Tourism Manager</option>\n            <option value=\"ui/ux designer\">UI/UX Designer</option>\n            <option value=\"video editor\">Video Editor</option>\n            <option value=\"web designer\">Web Designer</option>\n            <option value=\"wordpress designer\">WordPress Designer</option>\n          </select>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n      \n      <!-- Вопросы -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 1: What is the primary purpose of defining the objective of a prompt?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"A\"> A) To ensure the AI responds quickly</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"B\" data-correct=\"true\"> B) To set a clear and specific goal for the AI</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"C\"> C) To select the best AI model for the task</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"D\"> D) To format the prompt in a structured way</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 2: Which of the following is a key consideration when defining a prompt’s objective?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"A\"> A) The programming language used by the AI</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"B\" data-correct=\"true\"> B) The target audience and their needs</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"C\"> C) The length of the prompt</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"D\"> D) The font style of the output</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 3: Which statement is true about defining the objective?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"A\"> A) It can be skipped if the prompt is short</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"B\" data-correct=\"true\"> B) It includes determining the desired output format</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"C\"> C) It focuses solely on minimizing response time</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"D\"> D) It only applies to creative tasks</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 4: Which prompt structure is best for requesting a step-by-step explanation?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"A\"> A) \"Write a poem about space\"</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"B\" data-correct=\"true\"> B) \"As a tutor, explain quantum physics in 3 steps for beginners.\"</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"C\"> C) \"Describe the history of computers\"</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"D\"> D) \"Answer this question: What is gravity?\"</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 5: Why is the \"Role-Task-Format\" (RTF) structure effective?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"A\"> A) It ensures responses are under 100 words</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"B\" data-correct=\"true\"> B) It clarifies the AI’s role, task, and output format upfront</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"C\"> C) It minimizes the need for iterations</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"D\"> D) It guarantees factual accuracy</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 6: Which option represents a poorly structured prompt?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"A\"> A) \"Summarize this article in 200 words for a marketing team.\"</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"B\" data-correct=\"true\"> B) \"Write a story with a twist ending.\"</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"C\"> C) \"As a chef, list 5 vegan recipes using lentils.\"</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"D\"> D) \"In bullet points, explain the causes of climate change.\"</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 7: What is a key strategy for optimizing a prompt’s input?</h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"A\"> A) Using vague language to allow flexibility</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"B\" data-correct=\"true\"> B) Adding context, constraints, and examples</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"C\"> C) Limiting the prompt to one sentence</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"D\"> D) Prioritizing technical jargon</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 8: Which refinement would improve the prompt: \"Explain machine learning\"?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"A\" data-correct=\"true\"> A) \"Explain machine learning in simple terms for a 10-year-old.\"</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"B\"> B) \"Explain machine learning now!\"</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"C\"> C) \"Machine learning explanation, please.\"</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"D\"> D) \"Write about ML.\"</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 9: Which practice should be avoided when refining a prompt?</h3>\n        <label><input type=\"radio\" name=\"q9\" value=\"A\"> A) Including explicit formatting instructions</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"B\" data-correct=\"true\"> B) Adding irrelevant details to confuse the AI</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"C\"> C) Testing variations for clarity</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"D\"> D) Specifying the tone or style</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 10: If an AI response is irrelevant, what should you do first?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"A\"> A) Switch to a different AI model</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"B\" data-correct=\"true\"> B) Adjust the prompt’s structure or clarity</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"C\"> C) Increase the prompt’s length</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"D\"> D) Repeat the same prompt verbatim</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 11: Which metric is most useful for evaluating AI responses?</h3>\n        <label><input type=\"radio\" name=\"q11\" value=\"A\" data-correct=\"true\"> A) Alignment with the original objective</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"B\"> B) The response’s word count</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"C\"> C) The use of advanced vocabulary</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"D\"> D) The speed of the response</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 12: What is the goal of iterative improvements in the framework?</h3>\n        <label><input type=\"radio\" name=\"q12\" value=\"A\"> A) To finalize the prompt on the first attempt</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"B\" data-correct=\"true\"> B) To gradually enhance results through testing and adjustments</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"C\"> C) To reduce the number of prompts used</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"D\"> D) To prioritize quantity over quality</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 13: Which method supports iterative improvements?</h3>\n        <label><input type=\"radio\" name=\"q13\" value=\"A\"> A) Using the same prompt for all tasks</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"B\" data-correct=\"true\"> B) A/B testing different prompt versions</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"C\"> C) Avoiding user feedback</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"D\"> D) Sticking to initial assumptions</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 14: You need to create a prompt for a customer service chatbot. Which step involves testing different phrasings?</h3>\n        <label><input type=\"radio\" name=\"q14\" value=\"A\"> A) Defining the objective</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"B\" data-correct=\"true\"> B) Iterative improvements</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"C\"> C) Choosing the prompt structure</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"D\"> D) Optimizing the input</label>\n      </div>\n      \n      <div class=\"question\" data-points=\"2\">\n        <h3>Question 15: When using the framework for drafting an email, which step ensures the AI includes a call-to-action?</h3>\n        <label><input type=\"radio\" name=\"q15\" value=\"A\"> A) Evaluating responses</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"B\" data-correct=\"true\"> B) Optimizing the input</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"C\"> C) Defining the objective</label>\n        <label><input type=\"radio\" name=\"q15\" value=\"D\"> D) Applying the framework in real scenarios</label>\n      </div>\n      \n      <button id=\"submitBtn\" type=\"button\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n  \n  <script>\n    // Функция перемешивания оставлена, но не вызывается, чтобы сохранить порядок вопросов\n    function shuffle(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n\n    let timer;\n    let seconds = 0;\n    const timeLimit = 300; // 5 минут\n    // Название экзамена установлено как \"What prompting is\"\n    const examName = \"What prompting is\";\n\n    function startQuiz() {\n      document.getElementById('titlePage').classList.add('hidden');\n      document.getElementById('quizContainer').classList.remove('hidden');\n      startTimer();\n    }\n\n    function startTimer() {\n      timer = setInterval(() => {\n        seconds++;\n        const minutes = Math.floor(seconds / 60);\n        const rem = seconds % 60;\n        document.getElementById('timer').textContent =\n          String(minutes).padStart(2, '0') + \":\" + String(rem).padStart(2, '0');\n        if (seconds >= timeLimit) {\n          clearInterval(timer);\n          calculateScore(true);\n        }\n      }, 1000);\n    }\n\n    // Форматирует дату в формате \"dd.mm.yyyy hh:mm\"\n    function formatDate(date) {\n      const options = {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: false\n      };\n      const formatted = date.toLocaleString(\"en-GB\", options);\n      return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n    }\n\n    function calculateScore(timeout = false) {\n      const submitButton = document.getElementById('submitBtn');\n      if (submitButton) {\n        submitButton.style.display = 'none';\n      }\n      clearInterval(timer);\n      let totalPoints = 0;\n      let maxPoints = 0;\n      const questions = document.querySelectorAll('.question');\n      questions.forEach(question => {\n        const points = parseInt(question.dataset.points) || 1;\n        maxPoints += points;\n        if (points === 0) return; // Пропускаем блок с информацией о пользователе\n        let correct = true;\n        const inputs = question.querySelectorAll('input');\n        let selectedValues = [];\n        let correctValues = [];\n        inputs.forEach(inp => {\n          if (inp.checked) selectedValues.push(inp.value);\n          if (inp.dataset.correct === \"true\") correctValues.push(inp.value);\n        });\n        if (\n          selectedValues.length !== correctValues.length ||\n          !selectedValues.every(val => correctValues.includes(val))\n        ) {\n          correct = false;\n        }\n        if (correct) {\n          totalPoints += points;\n          question.classList.add('correct');\n        } else {\n          question.classList.add('incorrect');\n          inputs.forEach(inp => {\n            if (inp.dataset.correct === \"true\") {\n              inp.parentElement.classList.add('correct-answer');\n            }\n          });\n        }\n      });\n      const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n      const timeUsed = `${Math.floor(seconds / 60)}m ${seconds % 60}s`;\n      let resultsHTML = `\n        <h3>Exam Results</h3>\n        <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n        <p>Time used: ${timeUsed}</p>\n        ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n        ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n      `;\n      resultsHTML += `\n        <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n        <button type=\"button\" onclick=\"window.location.href='https://hook.eu1.make.com/lnpdl8kfsfduaaa8r46ic6odtic1b27j'\">Read Again</button>\n        <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n      `;\n      document.getElementById('result').innerHTML = resultsHTML;\n\n      const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n      const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n      const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n      const postData = {\n        fullName,\n        profession,\n        recruiter,\n        day: \"1\",\n        examName,\n        scoreObtained: totalPoints,\n        scoreTotal: maxPoints,\n        timeUsed: seconds,\n        timeTotal: timeLimit,\n        date: formatDate(new Date())\n      };\n\n      fetch(\"https://auto.crm-s.com/webhook/Onboarding/Update\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(postData)\n      })\n      .then(res => res.text())\n      .then(data => console.log(\"POST response:\", data))\n      .catch(err => console.error(\"Error in POST:\", err));\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n\n    // loadTask() заменяет вид экзамена инструкциями по заданию\n    function loadTask() {\n      const taskStartTime = new Date();\n      const taskMarkdown = `# 🛠 Five-step Framework - Practice Task\n\n🔹 Design a project plan for implementing the Five-step Framework in prompt engineering. Focus on:\n- Defining a clear objective for your prompt.\n- Structuring your prompt to include context, task, format, examples, and constraints.\n- Iteratively refining your prompt based on feedback and testing.\n- Evaluating improvements through defined metrics.\n\n# ✅ Steps:\n1. Objective Definition: Explain the goal of your prompt.\n2. Prompt Structure: Describe how you'll structure the prompt using the five-step method.\n3. Iteration: Outline your plan for iterative refinement (e.g., A/B testing).\n4. Evaluation: Propose metrics to assess the quality and effectiveness of AI responses.\n\n# ✏️ When finished, mark the checkbox and optionally provide a link to your detailed plan.`;\n      \n      const parsedMarkdown = parseMarkdown(taskMarkdown);\n      document.body.innerHTML = `\n        <div style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding: 2rem;\">\n          ${parsedMarkdown}\n          <div style=\"margin-top: 2rem;\">\n            <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional link:</label>\n            <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://docs.google.com/...\" style=\"width: 100%; padding: 8px; margin: 4px 0 1rem;\">\n            <input type=\"checkbox\" id=\"taskCompletedCheckbox\">\n            <label for=\"taskCompletedCheckbox\">Task Completed</label>\n          </div>\n        </div>\n      `;\n      \n      const checkbox = document.getElementById(\"taskCompletedCheckbox\");\n      checkbox.addEventListener(\"change\", function() {\n        if (checkbox.checked) {\n          const taskLink = document.getElementById(\"taskLinkInput\").value.trim() || \"\";\n          const now = new Date();\n          const day = String(now.getDate()).padStart(2, '0');\n          const month = String(now.getMonth() + 1).padStart(2, '0');\n          const year = now.getFullYear();\n          const hours = String(now.getHours()).padStart(2, '0');\n          const minutes = String(now.getMinutes()).padStart(2, '0');\n          const formattedDate = `${day}.${month}.${year} ${hours}:${minutes}`;\n          fetch(\"https://auto.crm-s.com/webhook/Onboarding/UpdateTaskTable\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ \n              link: taskLink,\n              date: formattedDate\n            })\n          })\n          .then(response => response.text())\n          .then(data => {\n            console.log(\"Task completed webhook sent:\", data);\n            checkbox.disabled = true;\n          })\n          .catch(err => console.error(\"Error sending task completed webhook:\", err));\n        }\n      });\n    }\n\n    // Markdown parser: преобразует markdown-заголовки в сворачиваемые элементы <details>\n    function parseMarkdown(markdownText) {\n      const lines = markdownText.split('\\n');\n      let html = \"\";\n      const stack = [];\n      lines.forEach(line => {\n        const match = line.match(/^(#{1,4})\\s+(.*)/);\n        if (match) {\n          const level = match[1].length;\n          const text = match[2];\n          while (stack.length && stack[stack.length - 1] >= level) {\n            html += \"</details>\";\n            stack.pop();\n          }\n          html += `<details><summary>${text}</summary>`;\n          stack.push(level);\n        } else {\n          html += line + \"<br>\";\n        }\n      });\n      while (stack.length) {\n        html += \"</details>\";\n        stack.pop();\n      }\n      return html;\n    }\n    \n    // Добавляем обработчик для кнопки Start Exam после загрузки DOM\n    document.addEventListener(\"DOMContentLoaded\", function() {\n      document.getElementById(\"startExamBtn\").addEventListener(\"click\", startQuiz);\n    });\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -80,
        20
      ],
      "id": "416c4577-b5a5-4f18-b03d-1f190b63327f",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "ac795fd5-c433-4a73-a11d-0f5bfb714c8d",
  "triggerCount": 0,
  "tags": []
}