{
  "createdAt": "2025-06-11T08:56:46.855Z",
  "updatedAt": "2025-06-11T08:56:50.454Z",
  "id": "2mXL8lXJ1Ir6L2CN",
  "name": "AppTest-Screen_recording",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/leadgeneration/tests/ScreenRecording",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -280,
        -120
      ],
      "id": "14719b47-4451-447a-ae09-69044e2e40d6",
      "name": "Webhook",
      "webhookId": "6c85f4cf-3426-4440-b0ed-c67413fa5269"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>Screen Recording Exam</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    input[type=\"radio\"],\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n    }\n    input[type=\"text\"],\n    input[type=\"number\"],\n    select {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    input[disabled] {\n      background: #f3f3f3;\n      color: #888;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    /* Task Section Styles */\n    #taskSection {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    #taskSection label {\n      font-weight: bold;\n    }\n    #taskLinkInput {\n      width: 100%;\n      padding: 8px;\n      margin-top: 4px;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    #markDoneBtn {\n      margin-top: 16px;\n      background: var(--green);\n      padding: 12px 24px;\n      color: #fff;\n      font-size: 15px;\n      font-weight: 700;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      display: inline-flex;\n      align-items: center;\n      transition: background 0.3s ease, transform 0.2s ease;\n    }\n    #markDoneBtn:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #markDoneBtnIcon {\n      width: 18px;\n      height: 18px;\n      margin-right: 8px;\n      transition: fill 0.3s ease;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>Screen Recording Exam</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>7 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <!-- Start Exam button calls startQuiz() globally. -->\n      <button onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>Screen Recording Exam</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., Jane Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"Lead generator\" disabled>\n        </label>\n        <label>\n         Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Q1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. Which tool is recommended for Windows screen recording according to the guide?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"OBS\"> OBS Studio</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"Camtasia\"> Camtasia</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"oCam\" data-correct=\"true\"> oCam</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"Snagit\"> Snagit</label>\n      </div>\n\n      <!-- Q2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. Which keyboard shortcut opens the screen recording toolbar on macOS?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"CmdShift4\"> Command + Shift + 4</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"CmdShift5\" data-correct=\"true\"> Command + Shift + 5</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"CmdOptEsc\"> Command + Option + Esc</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"CtrlShift5\"> Control + Shift + 5</label>\n      </div>\n\n      <!-- Q3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. To ensure your screen recording includes audio, what must you do in the settings?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"SelectMicrophone\" data-correct=\"true\"> Select an available microphone</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"IncreaseVolume\"> Increase system volume</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"UseSpeakers\"> Use external speakers</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"NoAction\"> No action is needed</label>\n      </div>\n\n      <!-- Q4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. What resolution is recommended for exporting your screen recording?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"1080p\"> 1080p</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"480p\"> 480p</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"4K\"> 4K</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"720p\" data-correct=\"true\"> 720p</label>\n      </div>\n\n      <!-- Q5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. In QuickTime Player on macOS, which sequence correctly exports a video at 720p?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"FileExport720\" data-correct=\"true\"> File → Export As → 720p</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"FileSave720\"> File → Save As → 720p</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"EditExport720\"> Edit → Export → 720p</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"ToolsExport720\"> Tools → Export → 720p</label>\n      </div>\n\n      <!-- Q6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. Which cloud storage service is mentioned for uploading your recorded video?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"Dropbox\"> Dropbox</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"GoogleDrive\" data-correct=\"true\"> Google Drive</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"OneDrive\"> OneDrive</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"iCloud\"> iCloud</label>\n      </div>\n\n      <!-- Q7 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. On macOS, how do you capture a custom area of your screen?</h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"CmdShift4\"> Command + Shift + 4</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"CmdShift5Custom\" data-correct=\"true\"> Command + Shift + 5 and select a custom region</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"CmdOpt5\"> Command + Option + 5</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"CtrlShift5\"> Control + Shift + 5</label>\n      </div>\n\n      <!-- Q8 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. If your recording is missing audio, what is the first step to resolve it?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"CheckMicSetting\" data-correct=\"true\"> Verify that the microphone is enabled in settings</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"RestartApp\"> Restart the recording application</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"RebootPC\"> Reboot your computer</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"IncreaseBrightness\"> Increase screen brightness</label>\n      </div>\n\n      <!-- Q9 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. What is one benefit of exporting your screen recording at 720p?</h3>\n        <label><input type=\"radio\" name=\"q9\" value=\"SmallerFile\" data-correct=\"true\"> Smaller file size with consistent quality</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"HigherQuality\"> Highest possible quality regardless of file size</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"LowerQuality\"> Lower quality for faster uploads</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"NoBenefit\"> No significant benefit</label>\n      </div>\n\n      <!-- Q10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. Which method is recommended for uploading your video to Google Drive?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"DragDrop\" data-correct=\"true\"> Drag and drop the file into the folder</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"NewFileUpload\"> Click + New and choose File Upload</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"MonitorProgress\"> Monitor the upload progress</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"ManualURLChange\"> Manually change the folder URL</label>\n      </div>\n\n      <!-- Q11 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. How can you verify that your video has been successfully uploaded to Google Drive?</h3>\n        <label><input type=\"radio\" name=\"q11\" value=\"FileAppears\" data-correct=\"true\"> Confirm the file appears in the folder and plays correctly</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"ImmediateDeletion\"> Immediately delete the file after upload</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"RenameFile\"> Rename the file to confirm upload</label>\n        <label><input type=\"radio\" name=\"q11\" value=\"ShareWithEveryone\"> Share the file with everyone without verifying</label>\n      </div>\n\n      <!-- Q12 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. What should you do before starting your main screen recording?</h3>\n        <label><input type=\"radio\" name=\"q12\" value=\"TestRecording\" data-correct=\"true\"> Run a short test recording to verify settings</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"ImmediateRecording\"> Begin recording immediately without tests</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"SkipAudioCheck\"> Disable audio check for speed</label>\n        <label><input type=\"radio\" name=\"q12\" value=\"ChangeTheme\"> Change the software theme</label>\n      </div>\n\n      <!-- Q13 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. What is crucial to check in your recording settings to ensure audio is captured?</h3>\n        <label><input type=\"radio\" name=\"q13\" value=\"SelectMicrophone\" data-correct=\"true\"> That an available microphone is selected</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"AdjustBrightness\"> That the screen brightness is optimal</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"IncreaseResolution\"> That the resolution is set above 720p</label>\n        <label><input type=\"radio\" name=\"q13\" value=\"DisableAudio\"> That the audio is disabled</label>\n      </div>\n\n      <!-- Q14 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Which action is recommended to ensure smooth recording before starting your main project?</h3>\n        <label><input type=\"radio\" name=\"q14\" value=\"TestRecording\" data-correct=\"true\"> Run a short test recording</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"ImmediateRecording\"> Start recording immediately</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"SkipSetup\"> Skip setup to save time</label>\n        <label><input type=\"radio\" name=\"q14\" value=\"ChangeResolution\"> Change resolution to 4K</label>\n      </div>\n\n      <!-- Q15 (checkbox) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Select all common pitfalls in screen recording and their solutions:</h3>\n        <label>\n          <input type=\"checkbox\" name=\"q15\" value=\"NoAudio\" data-correct=\"true\">\n          Mistake: Not checking audio settings → Solve by verifying the microphone is enabled\n        </label>\n        <label>\n          <input type=\"checkbox\" name=\"q15\" value=\"WrongResolution\" data-correct=\"true\">\n          Mistake: Not exporting at 720p → Solve by selecting 720p in settings\n        </label>\n        <label>\n          <input type=\"checkbox\" name=\"q15\" value=\"WrongArea\" data-correct=\"true\">\n          Mistake: Incorrect recording area → Solve by double-checking the screen selection\n        </label>\n        <label>\n          <input type=\"checkbox\" name=\"q15\" value=\"SkipTest\">\n          Mistake: Skipping test recordings → (Not a valid pitfall)\n        </label>\n        <label>\n          <input type=\"checkbox\" name=\"q15\" value=\"UploadVerify\" data-correct=\"true\">\n          Mistake: Ignoring upload verification → Solve by confirming the upload on Google Drive\n        </label>\n      </div>\n\n      <button id=\"submitExamBtn\" type=\"button\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    window.addEventListener('DOMContentLoaded', function() {\n\n      let timer;\n      let seconds = 0;\n      const timeLimit = 420; // 7 minutes\n      const examName = \"Screen Recording Exam\";\n\n      function startQuiz() {\n        document.getElementById('titlePage').classList.add('hidden');\n        document.getElementById('quizContainer').classList.remove('hidden');\n        startTimer();\n      }\n      window.startQuiz = startQuiz;\n\n      function startTimer() {\n        timer = setInterval(() => {\n          seconds++;\n          const minutes = Math.floor(seconds / 60);\n          const remain = seconds % 60;\n          document.getElementById('timer').textContent =\n            String(minutes).padStart(2, '0') + \":\" + String(remain).padStart(2, '0');\n          if (seconds >= timeLimit) {\n            clearInterval(timer);\n            calculateScore(true);\n          }\n        }, 1000);\n      }\n\n      function formatDate(date) {\n        const options = {\n          day: \"2-digit\",\n          month: \"2-digit\",\n          year: \"numeric\",\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          hour12: false\n        };\n        const formatted = date.toLocaleString(\"en-GB\", options);\n        return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n      }\n\n      function calculateScore(timeout = false) {\n    const submitBtn = document.getElementById('submitExamBtn');\n    if (submitBtn) {\n      submitBtn.style.display = 'none';\n    }\n    clearInterval(timer);\n\n    let totalPoints = 0;\n    let maxPoints = 0;\n    const questions = document.querySelectorAll('.question');\n    questions.forEach(question => {\n      const points = parseInt(question.dataset.points) || 1;\n      maxPoints += points;\n      if (points === 0) return; // skip user data block\n      let correct = true;\n      const inputs = question.querySelectorAll('input');\n      let selectedVals = [];\n      let correctVals = [];\n      inputs.forEach(input => {\n        if (input.checked) selectedVals.push(input.value);\n        if (input.dataset.correct === \"true\") {\n          correctVals.push(input.value);\n        }\n      });\n      if (\n        selectedVals.length !== correctVals.length ||\n        !selectedVals.every(val => correctVals.includes(val))\n      ) {\n        correct = false;\n      }\n      if (correct) {\n        totalPoints += points;\n        question.classList.add('correct');\n      } else {\n        question.classList.add('incorrect');\n        inputs.forEach(inp => {\n          if (inp.dataset.correct === \"true\") {\n            inp.parentElement.classList.add('correct-answer');\n          }\n        });\n      }\n    });\n\n    const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n    const timeUsedSec = seconds;\n    const timeUsedStr = `${Math.floor(timeUsedSec / 60)}m ${timeUsedSec % 60}s`;\n\n    let resultHTML = `\n      <h3>Exam Results</h3>\n      <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n      <p>Time used: ${timeUsedStr}</p>\n      ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n      ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n    `;\n    resultHTML += `\n      <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n      <button type=\"button\" onclick=\"window.location.href='https://hook.eu1.make.com/jcjl176nvrhlm4ag7qiixjzssxqdbl5n'\">Read Again</button>\n      <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n    `;\n    document.getElementById('result').innerHTML = resultHTML;\n\n    // Fix: use recruiter field instead of mentor\n    const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n    const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n    const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n    const postData = {\n      fullName,\n      profession,\n      recruiter,\n      day: \"Screen Recording\",\n      examName,\n      scoreObtained: totalPoints,\n      scoreTotal: maxPoints,\n      timeUsed: timeUsedSec,\n      timeTotal: timeLimit,\n      date: formatDate(new Date())\n    };\n\n    fetch(\"https://hook.eu1.make.com/2yp4rtezjxi2o6fi2jouedn3i7sgxss1\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(postData)\n    })\n    .then(response => response.text())\n    .then(data => console.log(\"POST response:\", data))\n    .catch(err => console.error(\"Error in POST:\", err));\n\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }\n  window.calculateScore = calculateScore;\n\n\n      function loadTask() {\n        // Task instructions for Screen Recording Practical Task\n        const taskMarkdown = `# 🎥 Screen Recording Task: Create & Share Your Recording\n\n## Objective\nNow that you've learned how to record your screen, it's time to put your skills into practice! Record a short tutorial video and upload it to Google Drive.\n\n## Task 1: Record Your Screen\n1. **Record a Short Tutorial Video**  \n   🎬 Create a **2-3 minute** video demonstrating one of the following:\n   - **Windows:** Use **oCam** to record a simple task (e.g., opening an application).\n   - **macOS:** Press **Command + Shift + 5** to record a task.\n2. **Ensure Audio is Captured**  \n   🎤 Check your settings and **select an available microphone** to avoid silent recordings.\n3. **Export at 720p Resolution**  \n   💻  \n   - On **Windows (oCam):** Adjust the resolution setting to **720p**.\n   - On **macOS:** In QuickTime Player, go to **File → Export As → 720p**.\n\n## Task 2: Upload to Google Drive\n1. **Upload Your Video**  \n   ☁️ Upload your final video to Google Drive using this link:  \n   [Google Drive Folder](https://drive.google.com/drive/folders/1IrPdCpjxtOhCMCW3OlDAl0ZZR8Okq85-?usp=drive_link)\n2. **Provide Proof**  \n   📸 Include screenshots of:\n   - Your screen recording settings (showing that the microphone is enabled).\n   - Export settings confirming 720p resolution.\n   - The uploaded video in Google Drive (with a visible file preview).\n\n## Reflection Questions\n❓ In a brief write-up, answer:\n- Which tool did you use for screen recording and why?\n- How did you ensure that your audio was captured correctly?\n- Did you face any challenges while exporting at 720p? How did you overcome them?\n- How did you verify that your video was successfully uploaded to Google Drive?\n\n---\n\nOnce you have completed the tasks, please click the **Mark as done** button below to submit your task.\n\n`;\n        const parsedMarkdown = parseMarkdownAdvanced(taskMarkdown);\n        document.body.innerHTML = `\n          <div id=\"taskSection\" style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding:2rem; max-width:800px; margin:0 auto;\">\n            ${parsedMarkdown}\n            <div style=\"margin-top: 2rem;\">\n              <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional task link:</label>\n              <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://docs.google.com/document/d/...\" style=\"width: 100%; padding: 8px; margin-top: 4px;\">\n            </div>\n            <div style=\"margin-top: 16px;\">\n              <button id=\"markDoneBtn\" style=\"\n                background: var(--green); \n                color: #fff; \n                border: none; \n                padding: 12px 24px; \n                border-radius: 6px; \n                font-size: 15px; \n                font-weight: 700; \n                cursor: pointer; \n                display: inline-flex; \n                align-items: center; \n                transition: background 0.3s ease, transform 0.2s ease;\n              \">\n                <svg id=\"markDoneBtnIcon\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"\n                     viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"\n                     style=\"width: 18px; height: 18px; margin-right: 8px;\">\n                  <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>\n                </svg>\n                Mark as done\n              </button>\n            </div>\n          </div>\n        `;\n        const markDoneBtn = document.getElementById(\"markDoneBtn\");\n        const markDoneBtnIcon = document.getElementById(\"markDoneBtnIcon\");\n        let isDone = false;\n        markDoneBtn.addEventListener(\"click\", function() {\n          isDone = !isDone;\n          const taskLink = document.getElementById(\"taskLinkInput\").value.trim();\n          if (isDone) {\n            markDoneBtnIcon.innerHTML = `\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 11l3 3L22 4\" />\n              <path d=\"M4 4h16v16H4z\" />\n            `;\n            const postData = {\n              link: taskLink,\n              date: formatDate(new Date())\n            };\n            fetch(\"https://hook.eu1.make.com/dy57247xgkw7criy6ind4j78ej3yqrx7\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify(postData)\n            })\n            .then(response => response.text())\n            .then(data => console.log(\"Task completed webhook sent:\", data))\n            .catch(err => console.error(\"Error sending task completed webhook:\", err));\n          } else {\n            markDoneBtnIcon.innerHTML = `<rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>`;\n          }\n        });\n      }\n      window.loadTask = loadTask;\n\n      function parseMarkdownAdvanced(markdownText) {\n        const lines = markdownText.split('\\n');\n        let segments = [];\n        let isCodeBlock = false;\n        let currentBlock = [];\n\n        for (let line of lines) {\n          if (line.trim().startsWith('```')) {\n            if (!isCodeBlock) {\n              isCodeBlock = true;\n              continue;\n            } else {\n              isCodeBlock = false;\n              segments.push({\n                type: 'code',\n                content: currentBlock.join('\\n')\n              });\n              currentBlock = [];\n              continue;\n            }\n          }\n          if (isCodeBlock) {\n            currentBlock.push(line);\n          } else {\n            segments.push({\n              type: 'text',\n              content: line\n            });\n          }\n        }\n\n        let html = '';\n        let openDetailsStack = [];\n        let isListOpen = false;\n\n        function closeDetailsUntil(level) {\n          while (openDetailsStack.length && openDetailsStack[openDetailsStack.length - 1] >= level) {\n            html += '</details>';\n            openDetailsStack.pop();\n          }\n        }\n        function closeListIfNeeded() {\n          if (isListOpen) {\n            html += '</ul>';\n            isListOpen = false;\n          }\n        }\n\n        function inlineFormat(str) {\n          str = str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n          str = str.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n          str = str.replace(/\\_(.+?)\\_/g, '<em>$1</em>');\n          return str;\n        }\n\n        segments.forEach(seg => {\n          if (seg.type === 'code') {\n            closeDetailsUntil(0);\n            closeListIfNeeded();\n            let codeContent = seg.content\n              .replace(/&/g, '&amp;')\n              .replace(/</g, '&lt;')\n              .replace(/>/g, '&gt;');\n            html += `<pre><code>${codeContent}</code></pre>`;\n          } else {\n            let line = seg.content;\n            let trimmed = line.trim();\n            if (!trimmed) {\n              closeListIfNeeded();\n              return;\n            }\n            let headingMatch = trimmed.match(/^(#{1,4})\\s+(.*)/);\n            if (headingMatch) {\n              closeListIfNeeded();\n              const level = headingMatch[1].length;\n              const headingText = headingMatch[2];\n              closeDetailsUntil(level);\n              const headingTag = `h${level}`;\n              html += `<details><summary><${headingTag}>${inlineFormat(headingText)}</${headingTag}></summary>`;\n              openDetailsStack.push(level);\n              return;\n            }\n            if (/^(\\-|\\*)\\s+/.test(trimmed)) {\n              if (!isListOpen) {\n                html += '<ul>';\n                isListOpen = true;\n              }\n              let itemText = trimmed.replace(/^(\\-|\\*)\\s+/, '');\n              html += `<li>${inlineFormat(itemText)}</li>`;\n              return;\n            }\n            closeListIfNeeded();\n            html += `<p>${inlineFormat(trimmed)}</p>`;\n          }\n        });\n\n        closeListIfNeeded();\n        closeDetailsUntil(0);\n        return html;\n      }\n    });\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -60,
        -120
      ],
      "id": "5003bbad-073f-44d4-8910-c09af8b51b28",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "b38835f0-80a4-412a-bbc6-66e31a618301",
  "triggerCount": 0,
  "tags": []
}