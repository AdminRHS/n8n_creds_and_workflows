{
  "createdAt": "2025-06-11T08:57:37.624Z",
  "updatedAt": "2025-06-11T08:57:41.424Z",
  "id": "JcgKaKXEivdX9zne",
  "name": "AppTes-VPN_usage",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/leadgeneration/tests/VPNUsage",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -460,
        -120
      ],
      "id": "59048a94-d095-4390-a444-c4a2523f838c",
      "name": "Webhook",
      "webhookId": "b8444655-3ab1-4abd-a7c7-e7b793f5c7c8"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>VPN usage</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46, 125, 50, 0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25, 118, 210, 0.04);\n    }\n    input[type=\"radio\"],\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n    }\n    input[type=\"text\"],\n    input[type=\"number\"],\n    select {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    input[disabled] {\n      background: #f3f3f3;\n      color: #888;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n\n    /* Make headings bigger inside <details> for top-level (# => <h1>) vs nested (## => <h2>, etc.) */\n    details summary h1 {\n      font-size: 1.4em;\n      margin: 0;\n    }\n    details summary h2 {\n      font-size: 1.3em;\n      margin: 0;\n    }\n    details summary h3 {\n      font-size: 1.2em;\n      margin: 0;\n    }\n    details summary h4 {\n      font-size: 1.1em;\n      margin: 0;\n    }\n    /* For text inside <details> that is not summary, can be smaller or normal */\n    details > *:not(summary) {\n      font-size: 0.95em;\n    }\n\n    /* Task Section Styles */\n    #taskSection {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    #taskSection label {\n      font-weight: bold;\n    }\n    #taskLinkInput {\n      width: 100%;\n      padding: 8px;\n      margin-top: 4px;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    #markDoneBtn {\n      margin-top: 16px;\n      background: var(--green);\n      padding: 12px 24px;\n      color: #fff;\n      font-size: 15px;\n      font-weight: 700;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      display: inline-flex;\n      align-items: center;\n      transition: background 0.3s ease, transform 0.2s ease;\n    }\n    #markDoneBtn:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n    }\n    #markDoneBtnIcon {\n      width: 18px;\n      height: 18px;\n      margin-right: 8px;\n      transition: fill 0.3s ease;\n    }\n    @media (max-width: 600px) {\n      body {\n        padding: 1rem;\n      }\n      .question {\n        padding: 1rem;\n      }\n      button {\n        width: 100%;\n        padding: 14px 20px;\n      }\n      #timer {\n        top: 10px;\n        right: 10px;\n        font-size: 14px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>VPN usage</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <!-- Start Exam button calls startQuiz() globally. -->\n      <button onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>VPN Usage Exam</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"Lead Generator\" disabled>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- Q1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. Which is NOT a main benefit of using a VPN for lead generation?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"LocationAccess\"> Access to location-restricted content</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"EnhancedSecurity\"> Enhanced security &amp; privacy</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"DirectlyMoreLeads\" data-correct=\"true\"> Directly guarantees more leads without effort</label>\n        <label><input type=\"radio\" name=\"q1\" value=\"OrganicSearch\"> Improved organic search results</label>\n      </div>\n\n      <!-- Q2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. How does a VPN help a lead generator access country-specific data?</h3>\n        <label>\n          <input type=\"radio\" name=\"q2\" value=\"LocationSpoofing\" data-correct=\"true\">\n          By using IP addresses from target countries\n        </label>\n        <label><input type=\"radio\" name=\"q2\" value=\"AdCreation\"> By creating custom ads in that region</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"ProxyForward\"> By forwarding landing pages via email</label>\n        <label><input type=\"radio\" name=\"q2\" value=\"FreeTrial\"> By offering a free trial to local prospects</label>\n      </div>\n\n      <!-- Q3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. Which encryption standard is recommended for secure VPN usage?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"AES128\"> AES-128</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"RSA512\"> RSA-512</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"AES256\" data-correct=\"true\"> AES-256</label>\n        <label><input type=\"radio\" name=\"q3\" value=\"Blowfish\"> Blowfish</label>\n      </div>\n\n      <!-- Q4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. What should be enabled to disconnect the internet if the VPN fails?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"KillSwitch\" data-correct=\"true\"> Kill Switch</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"SplitTunneling\"> Split Tunneling</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"IncognitoMode\"> Incognito Mode</label>\n        <label><input type=\"radio\" name=\"q4\" value=\"DNSProxy\"> DNS Proxy</label>\n      </div>\n\n      <!-- Q5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. Which type of VPN provider is typically less secure and may sell user data?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"NoLog\"> No-log VPN providers</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"PaidProviders\"> Paid VPN providers</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"ISP\"> ISP-based VPN services</label>\n        <label><input type=\"radio\" name=\"q5\" value=\"FreeVPN\" data-correct=\"true\"> Free VPN services</label>\n      </div>\n\n      <!-- Q6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. Which is a recommended way to protect against IP &amp; DNS leaks?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"ConfigProxy\"> Configuring a proxy manually</label>\n        <label>\n          <input type=\"radio\" name=\"q6\" value=\"DNSLeakTools\" data-correct=\"true\">\n          Use VPNs with DNS leak protection &amp; test with online tools\n        </label>\n        <label><input type=\"radio\" name=\"q6\" value=\"CloseTabs\"> Closing all browser tabs frequently</label>\n        <label><input type=\"radio\" name=\"q6\" value=\"NoPublicWifi\"> Never use public Wi-Fi networks</label>\n      </div>\n\n      <!-- Q7 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. Which of the following describes how a VPN can anonymize lead generation activities?</h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"HideIP\" data-correct=\"true\"> Concealing your real IP address</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"DeleteAllData\"> Deleting all data on your device</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"RandomizeCompany\"> Randomizing your company name</label>\n        <label><input type=\"radio\" name=\"q7\" value=\"EncryptLocalDisk\"> Encrypting your local hard drive</label>\n      </div>\n\n      <!-- Q8 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. Which recommended VPN providers were mentioned for no-log policies and AES-256 encryption?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"CiscoIBM\"> Cisco VPN &amp; IBM Connect</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"ExpressNord\" data-correct=\"true\"> ExpressVPN &amp; NordVPN</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"Microsoft\"> Microsoft VPN Services</label>\n        <label><input type=\"radio\" name=\"q8\" value=\"Cloudflare\"> Cloudflare Tunnels</label>\n      </div>\n\n      <!-- Q9 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. What is a key security risk of using older or weak VPN protocols like PPTP?</h3>\n        <label><input type=\"radio\" name=\"q9\" value=\"SlowerSpeed\"> It only slows your internet speed</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"OpenSource\"> It becomes open source to hackers</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"Vulnerable\" data-correct=\"true\"> Vulnerable to hacking due to weak encryption</label>\n        <label><input type=\"radio\" name=\"q9\" value=\"HighCost\"> It costs more to maintain</label>\n      </div>\n\n      <!-- Q10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. Why is monthly VPN security auditing recommended?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"SpeedTest\"> To monitor internet speed only</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"MalwareCheck\" data-correct=\"true\">\n          To check for vulnerabilities and ensure no leaks or malicious activity\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"ISPApproval\"> To maintain ISP approval</label>\n        <label><input type=\"radio\" name=\"q10\" value=\"StaffTraining\"> To train staff on usage</label>\n      </div>\n\n      <!-- Q11 (checkbox) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. Select all ways a VPN improves lead generation activities.</h3>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"BypassGeo\" data-correct=\"true\"> Bypass geo-restrictions</label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"RevealUserData\"> Reveal user data to marketing teams</label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"ImprovePrivacy\" data-correct=\"true\"> Enhance privacy &amp; data security</label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"DisableAds\"> Disable competitor ads altogether</label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"SeeLocalSearch\" data-correct=\"true\"> View location-specific search results</label>\n      </div>\n\n      <!-- Q12 (checkbox) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Select all advanced tools or techniques that work well with a VPN for lead generation.</h3>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"AdSpyTools\" data-correct=\"true\"> Spy tools like Anstrex or Adplexity</label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"SentinelOne\" data-correct=\"true\"> Endpoint detection (e.g., SentinelOne)</label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"OfficeSuite\"> Office suite software (e.g., MS Office)</label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"Wireshark\" data-correct=\"true\"> Network traffic analysis tools like Wireshark</label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"DNSLeakTest\"> Online DNS leak test tools</label>\n      </div>\n\n      <!-- Q13 (checkbox) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. Which steps can help prevent IP &amp; DNS leaks?</h3>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"DNSLeakProt\" data-correct=\"true\"> Use DNS leak protection</label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"KillSwitch\" data-correct=\"true\"> Enable Kill Switch</label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"OpenAllTabs\"> Open multiple browser tabs at once</label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"TestTools\" data-correct=\"true\"> Regularly test for leaks with online tools</label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"DisableAntiVirus\"> Disable antivirus to boost speed</label>\n      </div>\n\n      <!-- Q14 (checkbox) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Select the recommended best practices for configuring a VPN.</h3>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"HighSpeed\" data-correct=\"true\"> Choose a VPN with high-speed servers</label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"SplitTunneling\"> Always enable split tunneling</label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"ConfigKillSwitch\" data-correct=\"true\"> Enable Kill Switch and DNS leak protection</label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"NoAES\"> Avoid AES-256 encryption to reduce cost</label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"ServersInTarget\" data-correct=\"true\"> Ensure servers in target countries</label>\n      </div>\n\n      <!-- Q15 (checkbox) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Select common pitfalls and their solutions related to VPN usage.</h3>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"FalseSecurity\" data-correct=\"true\">\n          Mistake: Relying on VPN alone for device security → Solve by using firewalls &amp; antivirus\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"LowEncryption\" data-correct=\"true\">\n          Mistake: Using PPTP or low encryption → Solve by choosing AES-256\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"NoLogBlindly\" data-correct=\"true\">\n          Mistake: Trusting \"No-log\" claims blindly → Solve by researching independent audits\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"SnailSpeed\">\n          Mistake: Snail-speed servers → Solve by disabling encryption entirely\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"FreeVPNMalware\" data-correct=\"true\">\n          Mistake: Using free VPNs with malware → Solve by choosing reputable paid VPNs\n        </label>\n      </div>\n\n      <button id=\"submitExamBtn\" type=\"button\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    window.addEventListener('DOMContentLoaded', function() {\n\n      let timer;\n      let seconds = 0;\n      const timeLimit = 420; // 7 minutes\n      const examName = \"VPN Usage Exam\";  // Correct exam name for the table\n\n      function startQuiz() {\n        document.getElementById('titlePage').classList.add('hidden');\n        document.getElementById('quizContainer').classList.remove('hidden');\n        startTimer();\n      }\n      // Make function globally accessible for inline onclick\n      window.startQuiz = startQuiz;\n\n      function startTimer() {\n        timer = setInterval(() => {\n          seconds++;\n          const minutes = Math.floor(seconds / 60);\n          const remain = seconds % 60;\n          document.getElementById('timer').textContent =\n            String(minutes).padStart(2, '0') + \":\" + String(remain).padStart(2, '0');\n          if (seconds >= timeLimit) {\n            clearInterval(timer);\n            calculateScore(true);\n          }\n        }, 1000);\n      }\n\n      function formatDate(date) {\n        const options = {\n          day: \"2-digit\",\n          month: \"2-digit\",\n          year: \"numeric\",\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          hour12: false\n        };\n        const formatted = date.toLocaleString(\"en-GB\", options);\n        return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n      }\n\n      function calculateScore(timeout = false) {\n        const submitBtn = document.getElementById('submitExamBtn');\n        if (submitBtn) {\n          submitBtn.style.display = 'none';\n        }\n        clearInterval(timer);\n\n        let totalPoints = 0;\n        let maxPoints = 0;\n        const questions = document.querySelectorAll('.question');\n\n        questions.forEach(question => {\n          const points = parseInt(question.dataset.points) || 1;\n          maxPoints += points;\n          if (points === 0) return; // skip user data block\n          let correct = true;\n          const inputs = question.querySelectorAll('input');\n          let selectedVals = [];\n          let correctVals = [];\n\n          inputs.forEach(input => {\n            if (input.checked) selectedVals.push(input.value);\n            if (input.dataset.correct === \"true\") {\n              correctVals.push(input.value);\n            }\n          });\n\n          if (\n            selectedVals.length !== correctVals.length ||\n            !selectedVals.every(val => correctVals.includes(val))\n          ) {\n            correct = false;\n          }\n\n          if (correct) {\n            totalPoints += points;\n            question.classList.add('correct');\n          } else {\n            question.classList.add('incorrect');\n            inputs.forEach(inp => {\n              if (inp.dataset.correct === \"true\") {\n                inp.parentElement.classList.add('correct-answer');\n              }\n            });\n          }\n        });\n\n        const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n        const timeUsedSec = seconds;\n        const timeUsedStr = `${Math.floor(timeUsedSec / 60)}m ${timeUsedSec % 60}s`;\n        let resultHTML = `\n          <h3>Exam Results</h3>\n          <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n          <p>Time used: ${timeUsedStr}</p>\n          ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n          ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n        `;\n        resultHTML += `\n          <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n          <button type=\"button\" onclick=\"window.location.href='https://hook.eu1.make.com/jcjl176nvrhlm4ag7qiixjzssxqdbl5n'\">Read Again</button>\n          <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n        `;\n        document.getElementById('result').innerHTML = resultHTML;\n\n        const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n        const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n        const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n        const postData = {\n          fullName,\n          profession,\n          recruiter,\n          day: \"2\",\n          examName,\n          scoreObtained: totalPoints,\n          scoreTotal: maxPoints,\n          timeUsed: timeUsedSec,\n          timeTotal: timeLimit,\n          date: formatDate(new Date())\n        };\n\n        fetch(\"https://hook.eu1.make.com/2yp4rtezjxi2o6fi2jouedn3i7sgxss1\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(postData)\n        })\n        .then(response => response.text())\n        .then(data => console.log(\"POST response:\", data))\n        .catch(err => console.error(\"Error in POST:\", err));\n\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n      }\n      window.calculateScore = calculateScore;\n\n      function loadTask() {\n        fetch(\"https://hook.eu1.make.com/up226l5sykpbe4yd3qvo3ne3l7o6lggl\", { method: \"GET\" })\n          .then(response => response.text())\n          .then(markdownText => {\n            // Updated text for the VPN usage exam's tasks\n            const taskMarkdown = `# 🛠 VPN Usage Task: Secure & Efficient Lead Generation\n\n## Objective\nDemonstrate your ability to use a VPN to secure your online lead generation activities and access region-specific data. Complete the two tasks below:\n\n## Task 1: VPN Setup & Configuration\n1. **Choose a VPN provider** (e.g., ExpressVPN, NordVPN, ProtonVPN).\n2. **Install and configure the VPN** on your device.\n3. **Enable security features:**\n   - Activate **Kill Switch** (to prevent IP leaks).\n   - Enable **DNS leak protection**.\n   - Use **AES-256 encryption** for data security.\n4. **Connect to a server** in your target country (e.g., USA, Germany, UK).\n5. **Take a screenshot** showing your VPN connection with the server location and security settings.\n6. **Write a short explanation** (100–150 words) describing your choice, its benefits, and any challenges faced.\n\n## Task 2: Location-Specific Data Access\n1. **Connect your VPN** to a server in a target country.\n2. **Conduct a Google search** for targeted leads using advanced search operators (e.g., \\`site:linkedin.com\\`).\n3. **Take screenshots** of the search results with the VPN enabled and disabled.\n4. **Write a short comparison** (150–200 words) discussing differences in results and the impact on lead generation.\n\n### Submission Instructions:\nSubmit your screenshots and explanations in one document (Google Docs or Word), structured as follows:\n1. **Task 1:** VPN Setup & Configuration (Screenshot + Explanation)\n2. **Task 2:** Location-Based Search (Screenshots + Comparison)\n\n## Bonus Challenge:\nCompare results from three different countries and discuss regional differences in search outcomes and ad displays.\n`;\n\n            // Use the advanced parser to handle headings, code blocks, lists, bold, italic, etc.\n            const parsedMarkdown = parseMarkdownAdvanced(taskMarkdown);\n            document.body.innerHTML = `\n              <div id=\"taskSection\" style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding:2rem; max-width:800px; margin:0 auto;\">\n                ${parsedMarkdown}\n                <div style=\"margin-top: 2rem;\">\n                  <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional task link:</label>\n                  <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://docs.google.com/spreadsheets/...\" style=\"width: 100%; padding: 8px; margin-top: 4px;\">\n                </div>\n                <div style=\"margin-top: 16px;\">\n                  <button id=\"markDoneBtn\" style=\"\n                    background: var(--green); \n                    color: #fff; \n                    border: none; \n                    padding: 12px 24px; \n                    border-radius: 6px; \n                    font-size: 15px; \n                    font-weight: 700; \n                    cursor: pointer; \n                    display: inline-flex; \n                    align-items: center; \n                    transition: background 0.3s ease, transform 0.2s ease;\n                  \">\n                    <svg id=\"markDoneBtnIcon\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"\n                         viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"\n                         style=\"width: 18px; height: 18px; margin-right: 8px;\">\n                      <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>\n                    </svg>\n                    Mark as done\n                  </button>\n                </div>\n              </div>\n            `;\n            const markDoneBtn = document.getElementById(\"markDoneBtn\");\n            const markDoneBtnIcon = document.getElementById(\"markDoneBtnIcon\");\n            let isDone = false;\n            markDoneBtn.addEventListener(\"click\", function() {\n              isDone = !isDone;\n              const taskLink = document.getElementById(\"taskLinkInput\").value.trim();\n              if (isDone) {\n                markDoneBtnIcon.innerHTML = `\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 11l3 3L22 4\" />\n                  <path d=\"M4 4h16v16H4z\" />\n                `;\n                const postData = {\n                  link: taskLink,\n                  date: formatDate(new Date())\n                };\n                fetch(\"https://hook.eu1.make.com/dy57247xgkw7criy6ind4j78ej3yqrx7\", {\n                  method: \"POST\",\n                  headers: { \"Content-Type\": \"application/json\" },\n                  body: JSON.stringify(postData)\n                })\n                .then(response => response.text())\n                .then(data => console.log(\"Task completed webhook sent:\", data))\n                .catch(err => console.error(\"Error sending task completed webhook:\", err));\n              } else {\n                markDoneBtnIcon.innerHTML = `<rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>`;\n              }\n            });\n          })\n          .catch(err => {\n            console.error(\"Error loading task markdown:\", err);\n            document.body.innerHTML = `<p>Error loading task.</p>`;\n          });\n      }\n      window.loadTask = loadTask;\n\n      /**\n       * parseMarkdownAdvanced(markdownText):\n       *  1) Превращает заголовки (#, ##, ###, ####) в <details><summary><hX>Заголовок</hX></summary>... </details>.\n       *  2) Обрабатывает тройные бэктики (```...```), превращая их в <pre><code>...</code></pre>.\n       *  3) Строки, начинающиеся с - или * => <ul><li>... </li></ul>.\n       *  4) **bold** => <strong>, _italic_ => <em>.\n       *  5) Остальные строки => <p>...</p>.\n       */\n      function parseMarkdownAdvanced(markdownText) {\n        const lines = markdownText.split('\\n');\n        let segments = [];\n        let isCodeBlock = false;\n        let currentBlock = [];\n\n        // Разделяем на сегменты (code / text)\n        for (let line of lines) {\n          if (line.trim().startsWith('```')) {\n            if (!isCodeBlock) {\n              // начинаем code\n              isCodeBlock = true;\n              continue;\n            } else {\n              // заканчиваем code\n              isCodeBlock = false;\n              segments.push({\n                type: 'code',\n                content: currentBlock.join('\\n')\n              });\n              currentBlock = [];\n              continue;\n            }\n          }\n          if (isCodeBlock) {\n            currentBlock.push(line);\n          } else {\n            segments.push({\n              type: 'text',\n              content: line\n            });\n          }\n        }\n\n        let html = '';\n        let openDetailsStack = [];\n        let isListOpen = false;\n\n        function closeDetailsUntil(level) {\n          while (openDetailsStack.length && openDetailsStack[openDetailsStack.length - 1] >= level) {\n            html += '</details>';\n            openDetailsStack.pop();\n          }\n        }\n        function closeListIfNeeded() {\n          if (isListOpen) {\n            html += '</ul>';\n            isListOpen = false;\n          }\n        }\n\n        function inlineFormat(str) {\n          // HTML-escape\n          str = str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n          // **bold**\n          str = str.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n          // _italic_\n          str = str.replace(/\\_(.+?)\\_/g, '<em>$1</em>');\n          return str;\n        }\n\n        segments.forEach(seg => {\n          if (seg.type === 'code') {\n            // закрываем все details перед code\n            closeDetailsUntil(0);\n            closeListIfNeeded();\n            let codeContent = seg.content\n              .replace(/&/g, '&amp;')\n              .replace(/</g, '&lt;')\n              .replace(/>/g, '&gt;');\n            html += `<pre><code>${codeContent}</code></pre>`;\n          } else {\n            // text line\n            let line = seg.content;\n            let trimmed = line.trim();\n            if (!trimmed) {\n              closeListIfNeeded();\n              return;\n            }\n            // Заголовок?\n            let headingMatch = trimmed.match(/^(#{1,4})\\s+(.*)/);\n            if (headingMatch) {\n              closeListIfNeeded();\n              const level = headingMatch[1].length; // 1..4\n              const headingText = headingMatch[2];\n              // Закрываем <details>, чей уровень >= level\n              closeDetailsUntil(level);\n              // вставляем heading\n              // # => <h1>, ## => <h2>, ...\n              const headingTag = `h${level}`;\n              html += `<details><summary><${headingTag}>${inlineFormat(headingText)}</${headingTag}></summary>`;\n              openDetailsStack.push(level);\n              return;\n            }\n            // список?\n            if (/^(\\-|\\*)\\s+/.test(trimmed)) {\n              if (!isListOpen) {\n                html += '<ul>';\n                isListOpen = true;\n              }\n              let itemText = trimmed.replace(/^(\\-|\\*)\\s+/, '');\n              html += `<li>${inlineFormat(itemText)}</li>`;\n              return;\n            }\n            // абзац\n            closeListIfNeeded();\n            html += `<p>${inlineFormat(trimmed)}</p>`;\n          }\n        });\n\n        // Закрыть всё\n        closeListIfNeeded();\n        closeDetailsUntil(0);\n\n        return html;\n      }\n    });\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -240,
        -120
      ],
      "id": "6573fe9f-869a-41cc-a3b2-10cf798fe1bd",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "34557afd-7243-4b87-b642-23c4740cfaab",
  "triggerCount": 0,
  "tags": []
}