{
  "createdAt": "2025-06-11T08:50:25.861Z",
  "updatedAt": "2025-06-11T08:50:28.932Z",
  "id": "YhJBNemtqiSGJ1TV",
  "name": "AppTest-Generate_LinkedIn_message_templates",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "path": "onboarding/leadgeneration/tests/GenerateLinkedInMessageTemplates",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -280,
        20
      ],
      "id": "8d1536a5-00d3-4804-aa21-4cfcf45f92b9",
      "name": "Webhook",
      "webhookId": "0d185478-2231-42f3-a27b-b6c9abea795e"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "Generate LinkedIn message templates<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link type=\"image/png\" sizes=\"16x16\" rel=\"icon\" href=\"https://i.postimg.cc/gJf9MgWR/icons8-32.png\">\n  <meta charset=\"UTF-8\">\n  <title>Generate LinkedIn message templates</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --deep-blue: #081E2F;\n      --primary-yellow: #FCB305;\n      --red: #D32F2F;\n      --red-hover: #C62828;\n      --green: #2E7D32;\n      --green-hover: #1B5E20;\n      --blue: #197502;\n      --blue-dark: #1555C0;\n      --blue-light: #4245F5;\n      /* Sizes for headings in the task markdown */\n      --h1-size: 2em;\n      --h2-size: 1.8em;\n      --h3-size: 1.6em;\n      --h4-size: 1.4em;\n      --content-size: 0.9em;\n    }\n    body {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n      min-height: 100vh;\n    }\n    #titlePage {\n      text-align: center;\n      padding: 3rem 1rem;\n    }\n    #titlePage h1 {\n      font-size: 32px;\n      color: var(--deep-blue);\n      margin-bottom: 1.5rem;\n    }\n    .quiz-info {\n      background: white;\n      padding: 2rem;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(8, 30, 47, 0.1);\n      margin: 2rem auto;\n      max-width: 500px;\n    }\n    .info-item {\n      font-size: 16px;\n      color: #4A4A4A;\n      margin: 1rem 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    #timer {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: var(--green);\n      color: white;\n      padding: 8px 16px;\n      border-radius: 20px;\n      font-weight: 600;\n      box-shadow: 0 2px 6px rgba(46,125,50,0.2);\n    }\n    .hidden {\n      display: none;\n    }\n    .question {\n      background: white;\n      border-radius: 8px;\n      padding: 1.5rem;\n      margin-bottom: 1.5rem;\n      box-shadow: 0 2px 8px rgba(8, 30, 47, 0.1);\n      transition: all 0.3s ease;\n    }\n    .question h3 {\n      font-size: 16px;\n      font-weight: 600;\n      color: var(--deep-blue);\n      margin: 0 0 1rem 0;\n    }\n    label {\n      display: block;\n      margin: 0.5rem 0;\n      padding: 0.75rem;\n      border-radius: 4px;\n      font-size: 14px;\n      color: #4A4A4A;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    }\n    label:hover {\n      background: rgba(25,118,210,0.04);\n    }\n    /* Radio & checkbox styling */\n    input[type=\"radio\"],\n    input[type=\"checkbox\"] {\n      margin-right: 0.75rem;\n      accent-color: var(--green);\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n    }\n    input[type=\"text\"],\n    input[type=\"number\"],\n    select {\n      padding: 0.5rem;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n      width: 100%;\n      box-sizing: border-box;\n    }\n    input[disabled] {\n      background: #f3f3f3;\n      color: #888;\n    }\n    button {\n      background: var(--green);\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 6px;\n      font-weight: 700;\n      font-size: 15px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      display: block;\n      margin: 2rem auto 0;\n      letter-spacing: 0.5px;\n    }\n    button:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46,125,50,0.3);\n    }\n    #result {\n      background: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin-top: 2rem;\n      box-shadow: 0 2px 8px rgba(8,30,47,0.1);\n    }\n    .correct {\n      border-left: 4px solid var(--green);\n      background: #F0F9FF;\n    }\n    .incorrect {\n      border-left: 4px solid var(--red);\n    }\n    .correct-answer {\n      background: #E8F5E9 !important;\n      border: 1px solid var(--green);\n      border-radius: 4px;\n      padding: 2px 4px;\n      margin-top: 0.5rem;\n      display: inline-block;\n    }\n    /* Advanced Markdown Styles for Task Section */\n    details.level-1 > summary h1 { font-size: var(--h1-size); margin: 0; }\n    details.level-2 > summary h2 { font-size: var(--h2-size); margin: 0; }\n    details.level-3 > summary h3 { font-size: var(--h3-size); margin: 0; }\n    details.level-4 > summary h4 { font-size: var(--h4-size); margin: 0; }\n    details > :not(summary) { font-size: var(--content-size); }\n    /* Task Section */\n    #taskSection {\n      font-family: 'Open Sans', sans-serif;\n      background: #F8F9FA;\n      padding: 2rem;\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    #taskSection label {\n      font-weight: bold;\n    }\n    #taskLinkInput {\n      width: 100%;\n      padding: 8px;\n      margin-top: 4px;\n      border: 1px solid #DEE2E6;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    #markDoneBtn {\n      margin-top: 16px;\n      background: var(--green);\n      padding: 12px 24px;\n      color: #fff;\n      font-size: 15px;\n      font-weight: 700;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      display: inline-flex;\n      align-items: center;\n      transition: background 0.3s ease, transform 0.2s ease;\n    }\n    #markDoneBtn:hover {\n      background: var(--green-hover);\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(46,125,50,0.3);\n    }\n    #markDoneBtnIcon {\n      width: 18px;\n      height: 18px;\n      margin-right: 8px;\n      transition: fill 0.3s ease;\n    }\n    @media (max-width: 600px) {\n      body { padding: 1rem; }\n      .question { padding: 1rem; }\n      button { width: 100%; padding: 14px 20px; }\n      #timer { top: 10px; right: 10px; font-size: 14px; }\n    }\n  </style>\n</head>\n<body>\n  <!-- Title Page -->\n  <div id=\"titlePage\">\n    <h1>Generate LinkedIn message templates</h1>\n    <div class=\"quiz-info\">\n      <div class=\"info-item\">\n        <span>Questions:</span>\n        <strong>15</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Time Limit:</span>\n        <strong>5 minutes</strong>\n      </div>\n      <div class=\"info-item\">\n        <span>Passing Score:</span>\n        <strong>80%</strong>\n      </div>\n      <button id=\"startExamBtn\" onclick=\"startQuiz()\">Start Exam</button>\n    </div>\n  </div>\n\n  <!-- Quiz Container -->\n  <div id=\"quizContainer\" class=\"hidden\">\n    <div id=\"timer\">00:00</div>\n    <h1>Generate LinkedIn message templates</h1>\n    <form id=\"examForm\">\n      <!-- User Data Block (not scored) -->\n      <div class=\"question\" data-points=\"0\">\n        <h3>Enter Your Information</h3>\n        <label>\n          Your Name:\n          <input type=\"text\" name=\"fullName\" placeholder=\"e.g., John Doe\">\n        </label>\n        <label>\n          Your Profession:\n          <input type=\"text\" name=\"profession\" value=\"Lead Generator\" disabled>\n        </label>\n        <label>\n          Your Recruiter:\n          <select name=\"recruiter\">\n            <option value=\"Anastasia Fadeeva\">Anastasia Fadeeva</option>\n            <option value=\"Elena Ermakova\">Elena Ermakova</option>\n            <option value=\"Anna Aleksandrova\">Anna Aleksandrova</option>\n            <option value=\"Sabina Gasanova\">Sabina Gasanova</option>\n          </select>\n        </label>\n      </div>\n\n      <!-- 15 Questions (unchanged) -->\n      <!-- Q1 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>1. Which best practice helps grab the recipient’s attention in a LinkedIn message?</h3>\n        <label><input type=\"radio\" name=\"q1\" value=\"genericGreeting\">\n          Start with \"Dear Sir/Madam\"\n        </label>\n        <label><input type=\"radio\" name=\"q1\" value=\"personalization\" data-correct=\"true\">\n          Personalize with their name and recent activity\n        </label>\n        <label><input type=\"radio\" name=\"q1\" value=\"longIntro\">\n          Write a long intro about your company\n        </label>\n        <label><input type=\"radio\" name=\"q1\" value=\"buzzwords\">\n          Use trendy buzzwords and jargon\n        </label>\n      </div>\n\n      <!-- Q2 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>2. Why should LinkedIn messages typically be kept under 150 words?</h3>\n        <label><input type=\"radio\" name=\"q2\" value=\"limitTired\">\n          Because LinkedIn imposes a strict word limit\n        </label>\n        <label><input type=\"radio\" name=\"q2\" value=\"timeRespect\" data-correct=\"true\">\n          Short messages respect the recipient’s time and boost engagement\n        </label>\n        <label><input type=\"radio\" name=\"q2\" value=\"prefUnknown\">\n          No particular reason—150 words is arbitrary\n        </label>\n        <label><input type=\"radio\" name=\"q2\" value=\"searchRanking\">\n          It improves LinkedIn search rankings\n        </label>\n      </div>\n\n      <!-- Q3 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>3. Which approach is most effective for the first message to a potential client?</h3>\n        <label><input type=\"radio\" name=\"q3\" value=\"pitchImmediately\">\n          Immediately pitch your product or service\n        </label>\n        <label><input type=\"radio\" name=\"q3\" value=\"buildRapport\" data-correct=\"true\">\n          Establish rapport and keep the focus on them\n        </label>\n        <label><input type=\"radio\" name=\"q3\" value=\"detailedBiography\">\n          Provide your entire professional biography\n        </label>\n        <label><input type=\"radio\" name=\"q3\" value=\"askForMoney\">\n          Ask for direct funding or investment\n        </label>\n      </div>\n\n      <!-- Q4 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>4. Which example of a call-to-action (CTA) is most likely to encourage a response?</h3>\n        <label><input type=\"radio\" name=\"q4\" value=\"readDoc\">\n          \"Read our 50-page proposal for more info.\"\n        </label>\n        <label><input type=\"radio\" name=\"q4\" value=\"scheduleCall\" data-correct=\"true\">\n          \"Would you be open to a quick 10-minute call next week?\"\n        </label>\n        <label><input type=\"radio\" name=\"q4\" value=\"questionMark\">\n          \"???\"\n        </label>\n        <label><input type=\"radio\" name=\"q4\" value=\"spamLink\">\n          \"Click this random link for details.\"\n        </label>\n      </div>\n\n      <!-- Q5 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>5. Which is a recommended element for a Follow-Up Message if no response is received?</h3>\n        <label><input type=\"radio\" name=\"q5\" value=\"remindBusy\" data-correct=\"true\">\n          Politely remind them and offer a quick call to discuss potential collaboration\n        </label>\n        <label><input type=\"radio\" name=\"q5\" value=\"accusation\">\n          Accuse them of ignoring your first message\n        </label>\n        <label><input type=\"radio\" name=\"q5\" value=\"randomOffer\">\n          Randomly offer a discount with no context\n        </label>\n        <label><input type=\"radio\" name=\"q5\" value=\"sendDocs\">\n          Send a 10-page document explaining your service in detail\n        </label>\n      </div>\n\n      <!-- Q6 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>6. Why is it beneficial to mention a recent activity (e.g., post, work anniversary) in your message?</h3>\n        <label><input type=\"radio\" name=\"q6\" value=\"automateGreeting\">\n          It allows you to automate more greetings\n        </label>\n        <label><input type=\"radio\" name=\"q6\" value=\"proveReading\" data-correct=\"true\">\n          It shows genuine interest and personalization\n        </label>\n        <label><input type=\"radio\" name=\"q6\" value=\"immediateSale\">\n          It immediately closes the sale\n        </label>\n        <label><input type=\"radio\" name=\"q6\" value=\"notAdvised\">\n          Actually, referencing recent activity is discouraged\n        </label>\n      </div>\n\n      <!-- Q7 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>7. Which message template is best suited for someone you met at a webinar or networking event?</h3>\n        <label><input type=\"radio\" name=\"q7\" value=\"postEvent\" data-correct=\"true\">\n          \"Hi [Name], it was great connecting at [Event]! I enjoyed our discussion on [Topic]. Let’s stay in touch!\"\n        </label>\n        <label><input type=\"radio\" name=\"q7\" value=\"gratitudeAfterCall\">\n          \"Thank you for speaking with me today! Looking forward to your next call.\"\n        </label>\n        <label><input type=\"radio\" name=\"q7\" value=\"firstConnectionCold\">\n          \"Hi [Name], I came across your profile and want to connect.\"\n        </label>\n        <label><input type=\"radio\" name=\"q7\" value=\"followUpNoResponse\">\n          \"Hi [Name], just following up. Let me know if you’d like to discuss soon.\"\n        </label>\n      </div>\n\n      <!-- Q8 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>8. How does offering value first improve LinkedIn outreach?</h3>\n        <label><input type=\"radio\" name=\"q8\" value=\"immediateConversion\">\n          It immediately converts the lead into a customer\n        </label>\n        <label><input type=\"radio\" name=\"q8\" value=\"strongerInterest\" data-correct=\"true\">\n          It demonstrates how you can solve a problem, generating stronger interest\n        </label>\n        <label><input type=\"radio\" name=\"q8\" value=\"thousandWords\">\n          It allows you to write much longer messages\n        </label>\n        <label><input type=\"radio\" name=\"q8\" value=\"randomCTA\">\n          It justifies using random CTAs without context\n        </label>\n      </div>\n\n      <!-- Q9 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>9. Which tool can be used to generate LinkedIn messages directly within LinkedIn chat?</h3>\n        <label><input type=\"radio\" name=\"q9\" value=\"Magical\">\n          Magical – Saves and expands frequently used messages\n        </label>\n        <label><input type=\"radio\" name=\"q9\" value=\"ChatGPTForLinkedIn\" data-correct=\"true\">\n          ChatGPT for LinkedIn – Generates messages in LinkedIn chat\n        </label>\n        <label><input type=\"radio\" name=\"q9\" value=\"LinkedHelper\">\n          Linked Helper – Automates outreach while keeping messages personalized\n        </label>\n        <label><input type=\"radio\" name=\"q9\" value=\"Zapier\">\n          Zapier – Integrates multiple apps and triggers\n        </label>\n      </div>\n\n      <!-- Q10 -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>10. Which of the following best describes \"Magical\" in the context of LinkedIn message automation?</h3>\n        <label><input type=\"radio\" name=\"q10\" value=\"magicalPopups\">\n          A tool that blocks popups and ads within LinkedIn\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"saveExpand\" data-correct=\"true\">\n          A tool that saves &amp; expands frequently used LinkedIn messages\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"randomShuffle\">\n          A random shuffle system that changes message order\n        </label>\n        <label><input type=\"radio\" name=\"q10\" value=\"autoHire\">\n          A LinkedIn tool that automatically hires candidates\n        </label>\n      </div>\n\n      <!-- Q11 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>11. Select all reasons to keep your initial LinkedIn messages concise.</h3>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"RespectTime\" data-correct=\"true\">\n          Respects the recipient’s time\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"HigherResponse\" data-correct=\"true\">\n          Higher chance of a response\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"LongBuzzwords\">\n          Allows using more industry buzzwords\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"ImprovesSEO\">\n          Improves SEO ranking within LinkedIn\n        </label>\n        <label><input type=\"checkbox\" name=\"q11\" value=\"Clarity\" data-correct=\"true\">\n          Increases clarity &amp; prevents information overload\n        </label>\n      </div>\n\n      <!-- Q12 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>12. Select all recommended elements to include in a first connection request (cold outreach) message.</h3>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"NameMention\" data-correct=\"true\">\n          Address the recipient by name\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"ImmediatePitch\">\n          Immediately pitch your paid service\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"IceBreaker\" data-correct=\"true\">\n          Mention a relevant ice-breaker (industry, company)\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"AngryTone\">\n          Use an aggressive tone for urgency\n        </label>\n        <label><input type=\"checkbox\" name=\"q12\" value=\"OpenToConnect\" data-correct=\"true\">\n          Show willingness to connect and explore collaboration\n        </label>\n      </div>\n\n      <!-- Q13 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>13. Which pieces of info can ChatGPT use to generate a tailored LinkedIn message?</h3>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"NameRecipient\" data-correct=\"true\">\n          The recipient’s name and job title\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"ScenarioRequest\" data-correct=\"true\">\n          The scenario (e.g., follow-up, cold outreach, thank-you)\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"ConflictingTools\">\n          Conflicting automation tools for LinkedIn\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"PersonalProject\">\n          Personal project details of the user\n        </label>\n        <label><input type=\"checkbox\" name=\"q13\" value=\"IndustryFocus\" data-correct=\"true\">\n          Industry or area of focus\n        </label>\n      </div>\n\n      <!-- Q14 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>14. Select all scenarios where you might use a LinkedIn message template.</h3>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"ColdOutreach\" data-correct=\"true\">\n          First Connection Request (Cold Outreach)\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"FollowUp\" data-correct=\"true\">\n          Follow-up after no response\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"PostEvent\" data-correct=\"true\">\n          Post-event follow-up\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"RandomAnonymous\">\n          Random anonymous message with no context\n        </label>\n        <label><input type=\"checkbox\" name=\"q14\" value=\"ExpressingGratitude\" data-correct=\"true\">\n          Sending gratitude after a call\n        </label>\n      </div>\n\n      <!-- Q15 (Multi) -->\n      <div class=\"question\" data-points=\"2\">\n        <h3>15. Select all common LinkedIn messaging mistakes & recommended fixes.</h3>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"TooGeneric\" data-correct=\"true\">\n          Mistake: Too generic → Fix: Personalize with their name & details\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"WordLimit\">\n          Mistake: Under 150 words → Fix: Add more text for clarity\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"NoCTA\" data-correct=\"true\">\n          Mistake: No Call-to-Action → Fix: Suggest next steps or ask a question\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"SpellingGrammar\" data-correct=\"true\">\n          Mistake: Spelling/grammar errors → Fix: Proofread before sending\n        </label>\n        <label><input type=\"checkbox\" name=\"q15\" value=\"NoFollowUp\" data-correct=\"true\">\n          Mistake: Not following up → Fix: Send a gentle reminder after a few days\n        </label>\n      </div>\n\n      <button id=\"submitExamBtn\" type=\"button\" onclick=\"calculateScore()\">Submit Exam</button>\n    </form>\n    <div id=\"result\"></div>\n  </div>\n\n  <script>\n    window.addEventListener('DOMContentLoaded', function() {\n\n      let timer;\n      let seconds = 0;\n      const timeLimit = 300; // 5 minutes\n      const examName = \"Generate LinkedIn message templates\";\n\n      function startQuiz() {\n        document.getElementById('titlePage').classList.add('hidden');\n        document.getElementById('quizContainer').classList.remove('hidden');\n        startTimer();\n      }\n      window.startQuiz = startQuiz;\n\n      function startTimer() {\n        timer = setInterval(() => {\n          seconds++;\n          const minutes = Math.floor(seconds / 60);\n          const remain = seconds % 60;\n          document.getElementById('timer').textContent =\n            String(minutes).padStart(2, '0') + \":\" + String(remain).padStart(2, '0');\n          if (seconds >= timeLimit) {\n            clearInterval(timer);\n            calculateScore(true);\n          }\n        }, 1000);\n      }\n\n      function formatDate(date) {\n        const options = {\n          day: \"2-digit\",\n          month: \"2-digit\",\n          year: \"numeric\",\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          hour12: false\n        };\n        const formatted = date.toLocaleString(\"en-GB\", options);\n        return formatted.replace(/\\//g, \".\").replace(\", \", \" \");\n      }\n\n      function calculateScore(timeout = false) {\n        const submitBtn = document.getElementById('submitExamBtn');\n        if (submitBtn) { submitBtn.style.display = 'none'; }\n        clearInterval(timer);\n        let totalPoints = 0;\n        let maxPoints = 0;\n        const questions = document.querySelectorAll('.question');\n        questions.forEach(question => {\n          const points = parseInt(question.dataset.points) || 1;\n          maxPoints += points;\n          if (points === 0) return;\n          let correct = true;\n          const inputs = question.querySelectorAll('input');\n          let selectedValues = [];\n          let correctValues = [];\n          inputs.forEach(input => {\n            if (input.checked) selectedValues.push(input.value);\n            if (input.dataset.correct === \"true\") correctValues.push(input.value);\n          });\n          if (\n            selectedValues.length !== correctValues.length ||\n            !selectedValues.every(val => correctValues.includes(val))\n          ) { correct = false; }\n          if (correct) {\n            totalPoints += points;\n            question.classList.add('correct');\n          } else {\n            question.classList.add('incorrect');\n            inputs.forEach(input => {\n              if (input.dataset.correct === \"true\") {\n                input.parentElement.classList.add('correct-answer');\n              }\n            });\n          }\n        });\n        const percentage = ((totalPoints / maxPoints) * 100).toFixed(1);\n        const timeUsedSec = seconds;\n        const timeUsedStr = `${Math.floor(timeUsedSec / 60)}m ${timeUsedSec % 60}s`;\n        document.getElementById('result').innerHTML = `\n          <h3>Exam Results</h3>\n          <p>Your score: ${totalPoints} / ${maxPoints} (${percentage}%)</p>\n          <p>Time used: ${timeUsedStr}</p>\n          ${percentage >= 80 ? \"Congratulations! You passed!\" : \"Try again! Review your mistakes below.\"}\n          ${timeout ? \"<p class='warning'>Time limit exceeded!</p>\" : \"\"}\n        `;\n        document.getElementById('result').innerHTML += `\n          <button type=\"button\" onclick=\"location.reload()\">Retry</button>\n          <button type=\"button\" onclick=\"window.location.href='https://hook.eu1.make.com/jcjl176nvrhlm4ag7qiixjzssxqdbl5n'\">Read Again</button>\n          <button type=\"button\" id=\"taskButton\" onclick=\"loadTask()\">Task</button>\n        `;\n        const fullName = document.querySelector('[name=\"fullName\"]')?.value.trim() || \"\";\n        const profession = document.querySelector('[name=\"profession\"]')?.value.trim() || \"\";\n        const recruiter = document.querySelector('[name=\"recruiter\"]')?.value.trim() || \"\";\n        const postData = {\n          fullName,\n          profession,\n          recruiter,\n          day: \"3\",\n          examName,\n          scoreObtained: totalPoints,\n          scoreTotal: maxPoints,\n          timeUsed: timeUsedSec,\n          timeTotal: timeLimit,\n          date: formatDate(new Date())\n        };\n        fetch(\"https://hook.eu1.make.com/2yp4rtezjxi2o6fi2jouedn3i7sgxss1\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(postData)\n        })\n        .then(response => response.text())\n        .then(data => console.log(\"POST response:\", data))\n        .catch(err => console.error(\"Error in POST:\", err));\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n      }\n      window.calculateScore = calculateScore;\n\n      // loadTask: loads task instructions with advanced markdown formatting,\n      // an optional link input, and a \"Mark as done\" button that toggles its icon.\n      function loadTask() {\n        const taskMarkdown = `# 🛠 Objective\n\nThis task assesses your ability to craft effective LinkedIn connection requests with AI assistance while ensuring personalization, clarity, and engagement. You will complete a practical exercise using ChatGPT (or another AI tool) to create high-quality LinkedIn messages for various lead types.\n\n# 🔹 Task: Create Personalized LinkedIn Connection Requests with AI\n\n## ✅ Steps to Complete:\n1. **Generate Messages:**  \n   - Use ChatGPT (or another AI tool) to produce LinkedIn connection request messages.\n2. **Refine Messages:**  \n   - Enhance personalization (e.g., mention the recipient's industry, company, or recent activity).  \n   - Ensure clarity by keeping messages under 150 words.  \n   - Clearly state a value proposition (explain how you can help).  \n   - Make the tone conversational and professional.\n3. **Craft Three Connection Requests:**  \n   - **Tech Startup CEO:** Sarah Collins, CEO of TechBoost (an AI-driven marketing firm).  \n   - **HR Manager of an Advertising Company:** Michael Reynolds, Head of Talent at CreativeAds.  \n   - **Marketing Director in E-commerce:** Lisa Carter, Director of Marketing at ShopEase.\n4. **Submit Both Versions:**  \n   - Provide the original AI-generated message and your refined version for each lead type.\n\n## 📌 Submission Instructions\n- **Document Format:** Google Docs.\n- **Structure:**\n  1. Tech Startup CEO (AI-generated + refined message)\n  2. HR Manager of an Advertising Company (AI-generated + refined message)\n  3. Marketing Director in E-commerce (AI-generated + refined message)\n\n## 💡 Bonus Challenge:\n- Analyze the differences between the AI-generated and manually refined messages, and explain which version is more effective and why.\n- Modify an AI-generated message for a different industry (e.g., Healthcare, Finance, Cybersecurity) and explain your changes.\n\nBy completing this task, you demonstrate your ability to create engaging LinkedIn messages with AI assistance while ensuring personalization and delivering clear value.`;\n        // Use the advanced markdown parser for better formatting\n        const parsedMarkdown = parseMarkdownAdvanced(taskMarkdown);\n        document.body.innerHTML = `\n          <div id=\"taskSection\" style=\"font-family: 'Open Sans', sans-serif; background: #F8F9FA; padding:2rem; max-width:800px; margin:0 auto;\">\n            ${parsedMarkdown}\n            <div style=\"margin-top: 2rem;\">\n              <label for=\"taskLinkInput\" style=\"font-weight: bold;\">Optional task link:</label>\n              <input type=\"text\" id=\"taskLinkInput\" placeholder=\"https://docs.google.com/spreadsheets/...\" style=\"width: 100%; padding: 8px; margin-top: 4px;\">\n            </div>\n            <div style=\"margin-top: 16px;\">\n              <button id=\"markDoneBtn\" style=\"\n                background: var(--green); \n                color: #fff; \n                border: none; \n                padding: 12px 24px; \n                border-radius: 6px; \n                font-size: 15px; \n                font-weight: 700; \n                cursor: pointer; \n                display: inline-flex; \n                align-items: center; \n                transition: background 0.3s ease, transform 0.2s ease;\n              \">\n                <svg id=\"markDoneBtnIcon\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"\n                     viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"\n                     style=\"width: 18px; height: 18px; margin-right: 8px;\">\n                  <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>\n                </svg>\n                Mark as done\n              </button>\n            </div>\n          </div>\n        `;\n        const markDoneBtn = document.getElementById(\"markDoneBtn\");\n        const markDoneBtnIcon = document.getElementById(\"markDoneBtnIcon\");\n        let isDone = false;\n        markDoneBtn.addEventListener(\"click\", function() {\n          isDone = !isDone;\n          const taskLink = document.getElementById(\"taskLinkInput\").value.trim();\n          if (isDone) {\n            markDoneBtnIcon.innerHTML = `\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 11l3 3L22 4\" />\n              <path d=\"M4 4h16v16H4z\" />\n            `;\n            const postData = {\n              link: taskLink,\n              date: formatDate(new Date())\n            };\n            fetch(\"https://hook.eu1.make.com/dy57247xgkw7criy6ind4j78ej3yqrx7\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify(postData)\n            })\n            .then(response => response.text())\n            .then(data => console.log(\"Task completed webhook sent:\", data))\n            .catch(err => console.error(\"Error sending task completed webhook:\", err));\n          } else {\n            markDoneBtnIcon.innerHTML = `<rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>`;\n          }\n        });\n      }\n      window.loadTask = loadTask;\n\n      /**\n       * parseMarkdownAdvanced(markdownText):\n       *  1) Converts headings (#, ##, ###, ####) into collapsible <details> elements with appropriate heading tags and level classes.\n       *     For example: <details class=\"level-1\"><summary><h1>Heading</h1></summary> ... </details>\n       *  2) Converts code blocks (``` ... ```) into <pre><code>...</code></pre>.\n       *  3) Lines starting with \"- \" or \"* \" become list items grouped in <ul>.\n       *  4) **bold** becomes <strong> and _italic_ becomes <em>.\n       *  5) All other lines are wrapped in <p>.\n       */\n      function parseMarkdownAdvanced(markdownText) {\n        const lines = markdownText.split('\\n');\n        let segments = [];\n        let isCodeBlock = false;\n        let currentBlock = [];\n        for (let line of lines) {\n          if (line.trim().startsWith('```')) {\n            if (!isCodeBlock) {\n              isCodeBlock = true;\n              continue;\n            } else {\n              isCodeBlock = false;\n              segments.push({ type: 'code', content: currentBlock.join('\\n') });\n              currentBlock = [];\n              continue;\n            }\n          }\n          if (isCodeBlock) {\n            currentBlock.push(line);\n          } else {\n            segments.push({ type: 'text', content: line });\n          }\n        }\n        let html = '';\n        let openDetailsStack = [];\n        let isListOpen = false;\n        function closeDetailsUntil(level) {\n          while (openDetailsStack.length && openDetailsStack[openDetailsStack.length - 1] >= level) {\n            html += '</details>';\n            openDetailsStack.pop();\n          }\n        }\n        function closeListIfNeeded() {\n          if (isListOpen) {\n            html += '</ul>';\n            isListOpen = false;\n          }\n        }\n        function inlineFormat(str) {\n          str = str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n          str = str.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n          str = str.replace(/\\_(.+?)\\_/g, '<em>$1</em>');\n          return str;\n        }\n        segments.forEach(seg => {\n          if (seg.type === 'code') {\n            closeDetailsUntil(0);\n            closeListIfNeeded();\n            let codeContent = seg.content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            html += `<pre><code>${codeContent}</code></pre>`;\n          } else {\n            let line = seg.content;\n            let trimmed = line.trim();\n            if (!trimmed) { closeListIfNeeded(); return; }\n            let headingMatch = trimmed.match(/^(#{1,4})\\s+(.*)/);\n            if (headingMatch) {\n              closeListIfNeeded();\n              const level = headingMatch[1].length;\n              const headingText = headingMatch[2];\n              closeDetailsUntil(level);\n              const headingTag = `h${level}`;\n              html += `<details class=\"level-${level}\"><summary><${headingTag}>${inlineFormat(headingText)}</${headingTag}></summary>`;\n              openDetailsStack.push(level);\n              return;\n            }\n            if (/^(\\-|\\*)\\s+/.test(trimmed)) {\n              if (!isListOpen) { html += '<ul>'; isListOpen = true; }\n              let itemText = trimmed.replace(/^(\\-|\\*)\\s+/, '');\n              html += `<li>${inlineFormat(itemText)}</li>`;\n              return;\n            }\n            closeListIfNeeded();\n            html += `<p>${inlineFormat(trimmed)}</p>`;\n          }\n        });\n        closeListIfNeeded();\n        closeDetailsUntil(0);\n        return html;\n      }\n    });\n  </script>\n</body>\n</html>",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-type",
                "value": "text/html"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -60,
        20
      ],
      "id": "08d5044e-c9a5-4a5e-8f74-be2104106a68",
      "name": "Respond to Webhook",
      "notesInFlow": false
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "348d3b46-796d-4030-8000-d106024ea371",
  "triggerCount": 0,
  "tags": []
}